local api_session = require "nakama.session"
local json = require "nakama.util.json"
local uri = require "nakama.util.uri"
local uri_encode = uri.encode

{{#paths}}

--- {{operationId}}
-- {{summary}}
-- @param client
{{#parameters}}
-- @param {{name_lua}} ({{type_lua}}) {{description}}{{#title}} {{title}}{{/title}}{{#required}} (REQUIRED){{/required}}
{{/parameters}}
-- @param callback (function) Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy (table) Optional retry policy used specifically for this call or nil
-- @param cancellation_token (table) Optional cancellation token for this call
-- @return The result.
function M.{{operationId}}(client{{#has_parameters}}, {{parameter_names}}{{/has_parameters}}, callback, retry_policy, cancellation_token)
	log("{{operationId}}()")
	assert(client, "You must provide a client")
	{{#has_parameters}}
	{{#parameters}}
	{{#required}}
	assert(not {{name_lua}} or type({{name_lua}}) == "{{type_lua}}", "Argument '{{name_lua}}' must be 'nil' or of type '{{type}}'")
	{{/required}}
	{{/parameters}}
	{{/has_parameters}}

	{{#is_authentication_method}}
	-- unset the token so username+password credentials will be used
	client.config.bearer_token = nil
	{{/is_authentication_method}}

	local url_path = "{{path}}"
	{{#has_path_parameters}}
	{{#parameters}}
	{{#is_path_parameter}}
	url_path = url_path:gsub("{" .. "{{name}}" .. "}", uri_encode({{name_lua}}))
	{{/is_path_parameter}}
	{{/parameters}}
	{{/has_path_parameters}}

	local query_params = {}
	{{#has_query_parameters}}
	{{#parameters}}
	{{#is_query_parameter}}
	query_params["{{name}}"] = {{name_lua}}
	{{/is_query_parameter}}
	{{/parameters}}
	{{/has_query_parameters}}

	{{#has_body_parameters}}
	local post_data = json.encode({
	{{#parameters}}
	{{#is_body_parameter}}
		["{{name}}"] = {{name_lua}},
	{{/is_body_parameter}}
	{{/parameters}}
	})
	{{/has_body_parameters}}
	{{^has_body_parameters}}
	local post_data = nil
	{{/has_body_parameters}}

	return http(client, callback, url_path, query_params, "{{method}}", post_data, retry_policy, cancellation_token, function(result)
		{{#is_authentication_method}}
		if not result.error then
			result = api_session.create(result)
		end
		{{/is_authentication_method}}
		return result
	end)
end
{{/paths}}