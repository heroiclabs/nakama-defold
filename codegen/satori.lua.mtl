-- Code generated by codegen/generate-satori.py. DO NOT EDIT.

--[[--
The Satori client SDK for Defold.

@module satori
]]


local M = {}

--- Log function for Satori functions
-- Replace with your own log function
function M.log(...) print(...) end

local function log(...) M.log(...) end

-- helpers for parameter type checking
local function check_array(v) return type(v) == "table" end
local function check_string(v) return type(v) == "string" end
local function check_integer(v) return type(v) == "number" end
local function check_object(v) return type(v) == "table" end
local function check_boolean(v) return type(v) == "boolean" end

-- helpers for definition type checking
{{#definitionslist}}
local check_{{name}} = nil
{{/definitionslist}}
{{#definitionslist}}
check_{{name}} = function(v)
{{#properties}}
	assert(check_{{type}}(v["{{name}}"]), "You must provide property '{{name}}' of type '{{type}}'")
{{/properties}}
end
{{/definitionslist}}


--- Create a Satori client instance.
-- @param config A table of configuration options.
-- config.host
-- config.port
-- @return Satori Client instance.
function M.create_client(config)
	assert(config, "You must provide a configuration")
	assert(config.host, "You must provide a host")
	assert(config.port, "You must provide a port")
	log("create_client()")

	local client = {}
	local scheme = config.use_ssl and "https" or "http"
	client.config = {}
	client.config.host = config.host
	client.config.port = config.port
	client.config.http_uri = ("%s://%s:%d"):format(scheme, config.host, config.port)

	local ignored_fns = { create_client = true, log = true }
	for name,fn in pairs(M) do
		if not ignored_fns[name] and type(fn) == "function" then
			log("setting " .. name)
			client[name] = function(...) return fn(client, ...) end
		end
	end

	return client
end

{{#paths}}

--- {{operationId}}
-- {{summary}}
-- @param client
{{#parameters}}
-- @param {{name}} {{description}} {{title}}{{#required}} (REQUIRED){{/required}}
{{/parameters}}
-- @param callback
function M.{{operationId}}(client{{#has_parameters}}, {{parameter_names}}{{/has_parameters}}, callback)
	log("{{operationId}}()")
	assert(client, "You must provide a Satori client")
	{{#has_parameters}}
	{{#parameters}}
	{{#required}}
	assert(check_{{type}}({{name}}), "You must provide parameter '{{name}}' of type '{{type}}'")
	{{/required}}
	{{/parameters}}
	{{/has_parameters}}

	local config = client.config
	local options = {}
	local url_path = "{{path}}"
	{{#has_path_parameters}}
	{{#parameters}}
	{{#path}}
	url_path = url_path:gsub("{" .. "{{name}}" .. "}", {{name}})
	{{/path}}
	{{/parameters}}
	{{/has_path_parameters}}
	local url = ("%s%s"):format(config.http_uri, url_path)
	{{#has_query_parameters}}
	url = url .. "?a=b"
	{{#parameters}}
	{{#query}}
	.. "&{{name}}=" .. {{name}}
	{{/query}}
	{{/parameters}}
	{{/has_query_parameters}}

	{{#has_body_parameters}}
	local params = {}
	{{#parameters}}
	{{#body}}
	params["{{name}}"] = {{name}}
	{{/body}}
	{{/parameters}}
	local post_data = json.encode(params)
	{{/has_body_parameters}}
	{{^has_body_parameters}}
	local post_data = nil
	{{/has_body_parameters}}

	http.request(url, "{{method}}", function(self, id, response)
		{{#responses}}
		{{#code}}
		-- {{description}}
		if response.code == {{code}} then
			if callback then callback(response) end
			return
		end
		{{/code}}
		{{^code}}
		-- {{description}}
		if callback then callback(response) end
		{{/code}}
		{{/responses}}
	end,
	post_data, options)
end
{{/paths}}



return M