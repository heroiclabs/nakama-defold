// Copyright 2018 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bufio"
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"text/template"
)

const codeTemplate string = `-- Code generated by codegen/main.go. DO NOT EDIT.

local json = require "nakama.util.json"
local b64 = require "nakama.util.b64"
local log = require "nakama.util.log"
local async = require "nakama.util.async"
local api_session = require "nakama.session"

local uri = require "nakama.util.uri"
local uri_encode = uri.encode

local M = {}



--------------------------------------------------------------------------------
--- Create a match_create socket message
function M.create_match_create_message()
	local message = {
		match_create = {}
	}
	return message
end

--------------------------------------------------------------------------------
--- Create a match_join socket message
function M.create_match_join_message(match_id, token, metadata)
	assert(not match_id or (match_id and type(match_id) == "string"), "Argument 'match_id' must be 'nil' or of type 'string'")
	assert(not token or (token and type(token) == "string"), "Argument 'token' must be 'nil' or of type 'string'")
	local message = {
		match_join = {
			match_id = match_id,
			token = token,
			metadata = metadata,
		}
	}
	return message
end

--------------------------------------------------------------------------------
--- Create a match_leave socket message
function M.create_match_leave_message(match_id)
	assert(match_id and type(match_id) == "string", "Argument 'match_id' must be of type 'string'")
	local message = {
		match_leave = {
			match_id = match_id,
		}
	}
	return message
end

--------------------------------------------------------------------------------
--- Create a channel_message_send socket message
function M.create_channel_message_send_message(channel_id, content)
	assert(channel_id and type(channel_id) == "string", "Argument 'channel_id' must be of type 'string'")
	assert(content and type(content) == "string", "Argument 'content' must be of type 'string'")
	local message = {
		channel_message_send = {
			channel_id = channel_id,
			content = content,
		}
	}
	return message
end

--------------------------------------------------------------------------------
--- Create a channel_message_update socket message
function M.create_channel_message_update_message(channel_id, message_id, content)
	assert(channel_id and type(channel_id) == "string", "Argument 'channel_id' must be of type 'string'")
	assert(message_id and type(message_id) == "string", "Argument 'message_id' must be of type 'string'")
	assert(content and type(content) == "string", "Argument 'content' must be of type 'string'")
	local message = {
		channel_message_update = {
			channel_id = channel_id,
			message_id = message_id,
			content = content,
		}
	}
	return message
end

--------------------------------------------------------------------------------
--- Create a channel_message_remove socket message
function M.create_channel_message_remove_message(channel_id, message_id)
	assert(channel_id and type(channel_id) == "string", "Argument 'channel_id' must be of type 'string'")
	assert(message_id and type(message_id) == "string", "Argument 'message_id' must be of type 'string'")
	local message = {
		channel_message_remove = {
			channel_id = channel_id,
			message_id = message_id,
		}
	}
	return message
end

--------------------------------------------------------------------------------
--- Create a channel_join socket message
function M.create_channel_join_message(target, type, persistence, hidden)
	assert(target and type(target) == "string", "Argument 'target' must be of type 'string'")
	assert(type and type(type) == "number", "Argument 'type' must be of type 'number'")
	assert(persistence and type(persistence) == "boolean", "Argument 'persistence' must be of type 'boolean'")
	assert(hidden and type(hidden) == "boolean", "Argument 'hidden' must be of type 'boolean'")
	local message = {
		channel_join = {
			target = target,
			type = type,
			persistence = persistence,
			hidden = hidden,
		}
	}
	return message
end

--------------------------------------------------------------------------------
--- Create a channel_leave socket message
function M.create_channel_leave_message(channel_id)
	assert(channel_id and type(channel_id) == "string", "Argument 'channel_id' must be of type 'string'")
	local message = {
		channel_leave = {
			channel_id = channel_id,
		}
	}
	return message
end

--------------------------------------------------------------------------------
--- Create a matchmaker_add socket message
function M.create_matchmaker_add_message(query, min_count, max_count, string_properties, numeric_properties)
	assert(query and type(query) == "string", "Argument 'query' must be of type 'string'")
	assert(min_count and type(min_count) == "number", "Argument 'min_count' must be of type 'number'")
	assert(max_count and type(max_count) == "number", "Argument 'max_count' must be of type 'number'")
	local message = {
		matchmaker_add = {
			query = query,
			min_count = tostring(min_count),
			max_count = tostring(max_count),
			string_properties = string_properties,
			numeric_properties = numeric_properties,
		}
	}
	return message
end

--------------------------------------------------------------------------------
--- Create a matchmaker_remove socket message
function M.create_matchmaker_remove_message(ticket)
	assert(ticket and type(ticket) == "string", "Argument 'ticket' must be of type 'string'")
	local message = {
		matchmaker_remove = {
			ticket = ticket
		}
	}
	return message
end

--------------------------------------------------------------------------------
--- Create a match_data_send socket message
function M.create_match_data_message(match_id, op_code, data)
	assert(match_id and type(match_id) == "string", "Argument 'match_id' must be of type 'string'")
	assert(op_code and type(op_code) == "number", "Argument 'op_code' must be of type 'number'")
	assert(data and type(data) == "string", "Argument 'data' must be of type 'string'")
	local message = {
		match_data_send = {
			match_id = match_id,
			op_code = op_code,
			data = b64.encode(data),
		}
	}
	return message
end

--------------------------------------------------------------------------------
--- Create a status_follow socket message
function M.create_status_follow_message(user_id)
	assert(user_ids and type(user_ids) == "table", "Argument 'user_ids' must be of type 'table'")
	local message = {
		status_follow = {
			user_ids = user_ids
		}
	}
	return message
end

--------------------------------------------------------------------------------
--- Create a status_unfollow socket message
function M.create_status_unfollow_message(user_id)
	assert(user_ids and type(user_ids) == "table", "Argument 'user_ids' must be of type 'table'")
	local message = {
		status_unfollow = {
			user_ids = user_ids
		}
	}
	return message
end

--------------------------------------------------------------------------------
--- Create a status_update socket message
function M.create_status_update_message(status)
	assert(status and type(status) == "string", "Argument 'status' must be of type 'string'")
	local message = {
		status_update = {
			status = status
		}
	}
	return message
end

{{- range $defname, $definition := .Definitions }}
{{- $classname := $defname | title }}
{{ if $definition.Enum }}
--------------------------------------------------------------------------------
--- {{ $classname | pascalToSnake }}
-- {{ $definition.Description | stripNewlines }}
{{- range $i, $enum := $definition.Enum }}
M.{{ $classname | uppercase }}_{{ $enum }} = "{{ $enum }}"
{{- end }}
{{- else }}
--------------------------------------------------------------------------------
--- create_{{ $classname | pascalToSnake }}
-- {{ $definition.Description | stripNewlines }}
function M.create_{{ $classname | pascalToSnake }}(
	{{- $first := 1 }}
	{{- range $propname, $property := $definition.Properties }}
	{{- $luaType := luaType $property.Type $property.Ref }}
	{{- $varName := varName  $propname $property.Type $property.Ref }}
	{{- $varName := $varName | pascalToSnake }}
	{{if $first}}{{$first = 0}}{{else}},{{end}}{{ $varName }} -- '{{ $luaType }}' ({{ $property.Ref | cleanRef | pascalToSnake }}) {{ $property.Description | stripNewlines }}
	{{- end }}
	)
	{{- range $propname, $property := $definition.Properties }}
	{{- $luaType := luaType $property.Type $property.Ref }}
	{{- $varName := varName $propname $property.Type $property.Ref }}
	{{- $varName := $varName | pascalToSnake }}
	assert(not {{ $varName }} or type({{ $varName }}) == "{{ $luaType }}", "Argument '{{ $varName }}' must be 'nil' or of type '{{ $luaType }}'")
	{{- end }}
	return {
{{- range $propname, $property := $definition.Properties }}
{{- $luaType := luaType $property.Type $property.Ref }}
{{- $luaDef := luaDef $property.Type $property.Ref  }}
{{- $varName := varName $propname $property.Type $property.Ref }}
{{- $varName := $varName | pascalToSnake }}
		{{ $propname}} = {{ $varName }},
{{- end }}
	}
end
{{- end }}
{{- end }}

--------------------------------------------------------------------------------
-- The low level client for the Nakama API.

local _config = {}

--- Create a Nakama client instance
-- @param config
-- config.engine - Engine specific implementations
-- config.host
-- config.port
-- config.timeout
-- config.use_ssl - Use secure or non-secure sockets
-- config.bearer_token
-- config.username
-- config.password
-- @return Client instance
function M.create_client(config)
	assert(config, "You must provide a configuration")
	assert(config.host, "You must provide a host")
	assert(config.port, "You must provide a port")
	assert(config.engine, "You must provide an engine")
	assert(type(config.engine.http) == "function", "The engine must provide the 'http' function")
	assert(type(config.engine.socket_create) == "function", "The engine must provide the 'socket_create' function")
	assert(type(config.engine.socket_connect) == "function", "The engine must provide the 'socket_connect' function")
	assert(type(config.engine.socket_send) == "function", "The engine must provide the 'socket_send' function")
	log("init()")

	local client = {}
	local scheme = config.use_ssl and "https" or "http"
	client.engine = config.engine
	client.config = {}
	client.config.host = config.host
	client.config.port = config.port
	client.config.http_uri = ("%s://%s:%d"):format(scheme, config.host, config.port)
	client.config.bearer_token = config.bearer_token
	client.config.username = config.username
	client.config.password = config.password
	client.config.timeout = config.timeout or 10
	client.config.use_ssl = config.use_ssl

	return client
end

function M.on_notification(socket, fn)
	assert(socket, "You must provide a socket")
	socket.on_notification = fn
end
function M.on_matchdata(socket, fn)
	assert(socket, "You must provide a socket")
	socket.on_matchdata = fn
end
function M.on_matchpresence(socket, fn)
	assert(socket, "You must provide a socket")
	socket.on_matchpresence = fn
end
function M.on_matchmakermatched(socket, fn)
	assert(socket, "You must provide a socket")
	socket.on_matchmakermatched = fn
end
function M.on_statuspresence(socket, fn)
	assert(socket, "You must provide a socket")
	socket.on_statuspresence = fn
end
function M.on_streampresence(socket, fn)
	assert(socket, "You must provide a socket")
	socket.on_streampresence = fn
end
function M.on_streamdata(socket, fn)
	assert(socket, "You must provide a socket")
	socket.on_streamdata = fn
end
function M.on_channelmessage(socket, fn)
	assert(socket, "You must provide a socket")
	socket.on_channelmessage = fn
end
function M.on_channelpresence(socket, fn)
	assert(socket, "You must provide a socket")
	socket.on_channelpresence = fn
end
function M.on_disconnect(socket, fn)
	assert(socket, "You must provide a socket")
	socket.on_disconnect = fn
end

local function on_socket_message(socket, message)
	if message.notifications then
		if socket.on_notification then
			for n in ipairs(message.notifications.notifications) do
				socket.on_notification(message)
			end
		end
	elseif message.match_data then
		if socket.on_matchdata then
			message.match_data.data = b64.decode(message.match_data.data)
			socket.on_matchdata(message)
		end
	elseif message.match_presence_event then
		if socket.on_matchpresence then socket.on_matchpresence(message) end
	elseif message.matchmaker_matched then
		if socket.on_matchmakermatched then socket.on_matchmakermatched(message) end
	elseif message.status_presence_event then
		if socket.on_statuspresence then socket.on_statuspresence(message) end
	elseif message.stream_presence_event then
		if socket.on_streampresence then socket.on_streampresence(message) end
	elseif message.stream_data then
		if socket.on_streamdata then socket.on_streamdata(message) end
	elseif message.channel_message then
		if socket.on_channelmessage then socket.on_channelmessage(message) end
	elseif message.channel_presence_event then
		if socket.on_channelpresence then socket.on_channelpresence(message) end
	else
		log("Unhandled message")
	end
end

--- Create a Nakama socket
-- @param client The client to create the socket for
-- @return Socket instance
function M.create_socket(client)
	assert(client, "You must provide a client")
	local socket = client.engine.socket_create(client.config, on_socket_message)
	assert(socket, "No socket created")
	assert(type(socket) == "table", "The created instance must be a table")
	socket.client = client
	socket.engine = client.engine
	return socket
end

--- Attempt to connect a Nakama socket to the server
-- @param socket The client socket to connect (from call to create_socket)
-- @param callback Optional callback to invoke with the result
-- @return If no callback is provided the function returns the result
function M.socket_connect(socket, callback)
	assert(socket, "You must provide a socket")
	if callback then
		socket.engine.socket_connect(socket, callback)
	else
		return async(function(done)
			socket.engine.socket_connect(socket, done)
		end)
	end
end

--- Send message on Nakama socket
-- @param socket The client socket to use when sending the message
-- @param callback Optional callback to invoke with the result
-- @return If not callback is provided the function returns the result
function M.socket_send(socket, message, callback)
	assert(socket, "You must provide a socket")
	assert(message, "You must provide a message")
	if callback then
		socket.engine.socket_send(socket, message, callback)
	else
		return async(function(done)
			socket.engine.socket_send(socket, message, done)
		end)
	end
end

function M.sync(fn)
	local co = coroutine.create(fn)
	local ok, err = coroutine.resume(co)
	if not ok then
		log(err)
	end
end

function M.set_bearer_token(client, bearer_token)
	assert(client, "You must provide a client")
	client.config.bearer_token = bearer_token
end

{{- range $url, $path := .Paths }}
	{{- range $method, $operation := $path}}

--- {{ $operation.OperationId | pascalToSnake | removePrefix }}
-- {{ $operation.Summary | stripNewlines }}
-- @param client Nakama client
{{- range $i, $parameter := $operation.Parameters }}
{{- $luaType := luaType $parameter.Type $parameter.Schema.Ref }}
{{- $varName := varName $parameter.Name $parameter.Type $parameter.Schema.Ref }}
{{- $varName := $varName | pascalToSnake }}
{{- $varComment := varComment $parameter.Name $parameter.Type $parameter.Schema.Ref $parameter.Items.Type }}
-- @param {{ $varName }} ({{ $luaType}}) {{ $parameter.Description }}
{{- end }}
-- @param callback Optional callback function. If none is provided the function
-- is run from within a coroutine and will wait until the call completes and
-- return the result
function M.{{ $operation.OperationId | pascalToSnake | removePrefix }}(
	client
    {{- range $i, $parameter := $operation.Parameters }}
	{{- $luaType := luaType $parameter.Type $parameter.Schema.Ref }}
	{{- $varName := varName $parameter.Name $parameter.Type $parameter.Schema.Ref }}
	{{- $varName := $varName | pascalToSnake }}
	{{- $varComment := varComment $parameter.Name $parameter.Type $parameter.Schema.Ref $parameter.Items.Type }}
	,{{ $varName }}
	{{- end }}
	,callback)
	assert(client, "You must provide a client")

	{{- if $operation.OperationId | isAuthenticateMethod }}
	-- unset the token so username+password credentials will be used
	client.config.bearer_token = nil
	{{- end}}

	local url_path = "{{- $url }}"
    {{- range $parameter := $operation.Parameters }}
	{{- $varName := varName $parameter.Name $parameter.Type $parameter.Schema.Ref }}
    {{- if eq $parameter.In "path" }}
	url_path = url_path:gsub("{{- print "{" $parameter.Name "}"}}", uri_encode({{ $varName | pascalToSnake }}))
    {{- end }}
    {{- end }}

	local query_params = {}
	{{- range $parameter := $operation.Parameters}}
	{{- $varName := varName $parameter.Name $parameter.Type $parameter.Schema.Ref }}
	{{- if eq $parameter.In "query"}}
	query_params["{{- $parameter.Name }}"] = {{ $varName | pascalToSnake }}
	{{- end}}
	{{- end}}

    {{- range $parameter := $operation.Parameters }}
	{{- $varName := varName $parameter.Name $parameter.Type $parameter.Schema.Ref }}
    {{- if eq $parameter.In "body" }}
	local post_data = json.encode({{ $varName }})
    {{- end }}
    {{- end }}

	if callback then
		log("{{ $operation.OperationId | pascalToSnake | removePrefix }}() with callback")
		client.engine.http(client.config, url_path, query_params, "{{- $method | uppercase }}", post_data, function(result)
			{{- if $operation.Responses.Ok.Schema.Ref }}
			if not result.error and {{ $operation.Responses.Ok.Schema.Ref | cleanRef | pascalToSnake }} then
				result = {{ $operation.Responses.Ok.Schema.Ref | cleanRef | pascalToSnake }}.create(result)
			end
			{{- end }}
			callback(result)
		end)
	else
		log("{{ $operation.OperationId | pascalToSnake | removePrefix }}() with coroutine")
		return async(function(done)
			client.engine.http(client.config, url_path, query_params, "{{- $method | uppercase }}", post_data, function(result)
				{{- if $operation.Responses.Ok.Schema.Ref }}
				if not result.error and {{ $operation.Responses.Ok.Schema.Ref | cleanRef | pascalToSnake }} then
					result = {{ $operation.Responses.Ok.Schema.Ref | cleanRef | pascalToSnake }}.create(result)
				end
				{{- end }}
				done(result)
			end)
		end)
	end
end
	{{- end }}
{{- end }}

return M
`

var schema struct {
	Paths map[string]map[string]struct {
		Summary     string
		OperationId string
		Responses   struct {
			Ok struct {
				Schema struct {
					Ref string `json:"$ref"`
				}
			} `json:"200"`
		}
		Parameters []struct {
			Name     	string
			Description	string
			In       	string
			Required 	bool
			Type     	string   // used with primitives
			Items    	struct { // used with type "array"
				Type string
			}
			Schema struct { // used with http body
				Type string
				Ref  string `json:"$ref"`
			}
			Format   string // used with type "boolean"
		}
		Security []map[string][]struct {
		}
	}
	Definitions map[string]struct {
		Properties map[string]struct {
			Type  string
			Ref   string   `json:"$ref"` // used with object
			Items struct { // used with type "array"
				Type string
				Ref  string `json:"$ref"`
			}
			AdditionalProperties struct {
				Type string // used with type "map"
			}
			Format      string // used with type "boolean"
			Description string
		}
		Enum        []string
		Description string
		// used only by enums
		Title string
	}
}

func convertRefToClassName(input string) (className string) {
	cleanRef := strings.TrimPrefix(input, "#/definitions/")
	className = strings.Title(cleanRef)
	return
}

func stripNewlines(input string) (output string) {
	output = strings.Replace(input, "\n", "\n--", -1)
	return
}

func pascalToSnake(input string) (output string) {
	output = ""
	prev_low := false
	for _, v := range input {
		is_cap := v >= 'A' && v <= 'Z'
		is_low := v >= 'a' && v <= 'z'
		if is_cap && prev_low {
			output = output + "_"
		}
		output += strings.ToLower(string(v))
		prev_low = is_low
	}
	return
}

// camelToPascal converts a string from camel case to Pascal case.
func camelToPascal(camelCase string) (pascalCase string) {
	if len(camelCase) <= 0 {
		return ""
	}
	pascalCase = strings.ToUpper(string(camelCase[0])) + camelCase[1:]
	return
}
// pascalToCamel converts a Pascal case string to a camel case string.
func pascalToCamel(input string) (camelCase string) {
	if input == "" {
		return ""
	}
	camelCase = strings.ToLower(string(input[0]))
	camelCase += string(input[1:])
	return camelCase
}

func removePrefix(input string) (output string) {
	output = strings.Replace(input, "nakama_", "", -1)
	return
}

func isEnum(ref string) bool {
	// swagger schema definition keys have inconsistent casing
	var camelOk bool
	var pascalOk bool
	var enums []string

	cleanedRef := convertRefToClassName(ref)
	asCamel := pascalToCamel(cleanedRef)
	if _, camelOk = schema.Definitions[asCamel]; camelOk {
		enums = schema.Definitions[asCamel].Enum
	}

	asPascal := camelToPascal(cleanedRef)
	if _, pascalOk = schema.Definitions[asPascal]; pascalOk {
		enums = schema.Definitions[asPascal].Enum
	}

	if !pascalOk && !camelOk {
		return false
	}

	return len(enums) > 0
}

// Parameter type to Lua type
func luaType(p_type string, p_ref string) (out string) {
	if isEnum(p_ref) {
		out = "string"
		return
	}
	switch p_type {
		case "integer": out = "number"
		case "string": out = "string"
		case "boolean": out = "boolean"
		case "array": out = "table"
		case "object": out = "table"
		default: out = "table"
	}
	return
}

// Default value for Lua types
func luaDef(p_type string, p_ref string) (out string) {
	switch(p_type) {
		case "integer": out = "0"
		case "string": out = "\"\""
		case "boolean": out = "false"
		case "array": out = "{}"
		case "object": out = "{ _ = '' }"
		default: out = "M.create_" + pascalToSnake(convertRefToClassName(p_ref)) + "()"
	}
	return
}

// Lua variable name from name, type and ref
func varName(p_name string, p_type string, p_ref string) (out string) {
	switch(p_type) {
		case "integer": out = p_name + "_int"
		case "string": out = p_name + "_str"
		case "boolean": out = p_name + "_bool"
		case "array": out = p_name + "_arr"
		case "object": out = p_name + "_obj"
		default: out = p_name + "_" + pascalToSnake(convertRefToClassName(p_ref))
	}
	return
}

func varComment(p_name string, p_type string, p_ref string, p_item_type string) (out string) {
	switch(p_type) {
		case "integer": out = "number"
		case "string": out = "string"
		case "boolean": out = "boolean"
		case "array": out = "table (" + luaType(p_item_type, p_ref) + ")"
		case "object": out = "table (object)"
		default: out = "table (" + pascalToSnake(convertRefToClassName(p_ref)) + ")"
	}
	return
}

func isAuthenticateMethod(input string) (output bool) {
	output = strings.HasPrefix(input, "Nakama_Authenticate")
	return
}

func main() {
	// Argument flags
	var output = flag.String("output", "", "The output for generated code.")
	flag.Parse()

	inputs := flag.Args()
	if len(inputs) < 1 {
		fmt.Printf("No input file found: %s\n\n", inputs)
		fmt.Println("openapi-gen [flags] inputs...")
		flag.PrintDefaults()
		return
	}

	input := inputs[0]
	content, err := ioutil.ReadFile(input)
	if err != nil {
		fmt.Printf("Unable to read file: %s\n", err)
		return
	}


	if err := json.Unmarshal(content, &schema); err != nil {
		fmt.Printf("Unable to decode input %s : %s\n", input, err)
		return
	}

	fmap := template.FuncMap{
		"cleanRef": convertRefToClassName,
		"stripNewlines": stripNewlines,
		"title": strings.Title,
		"uppercase": strings.ToUpper,
		"pascalToSnake": pascalToSnake,
		"luaType": luaType,
		"luaDef": luaDef,
		"varName": varName,
		"varComment": varComment,
		"isEnum": isEnum,
		"isAuthenticateMethod": isAuthenticateMethod,
		"removePrefix": removePrefix,
	}
	tmpl, err := template.New(input).Funcs(fmap).Parse(codeTemplate)
	if err != nil {
		fmt.Printf("Template parse error: %s\n", err)
		return
	}

	if len(*output) < 1 {
		tmpl.Execute(os.Stdout, schema)
		return
	}

	f, err := os.Create(*output)
	if err != nil {
		fmt.Printf("Unable to create file: %s\n", err)
		return
	}
	defer f.Close()

	writer := bufio.NewWriter(f)
	tmpl.Execute(writer, schema)
	writer.Flush()
}
