{
  "swagger": "2.0",
  "info": {
    "title": "Satori Server API",
    "description": "*\nThe public client API for the Satori server.",
    "version": "1.0",
    "contact": {
      "name": "Heroic Labs",
      "url": "https://heroiclabs.com",
      "email": "hello@heroiclabs.com"
    }
  },
  "tags": [
    {
      "name": "Satori"
    }
  ],
  "host": "127.0.0.1:7450",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/healthcheck": {
      "get": {
        "summary": "A healthcheck which load balancers can use to check the service.",
        "operationId": "Satori_Healthcheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Satori"
        ]
      }
    },
    "/readycheck": {
      "get": {
        "summary": "A readycheck which load balancers can use to check the service.",
        "operationId": "Satori_Readycheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Satori"
        ]
      }
    },
    "/v1/authenticate": {
      "post": {
        "summary": "Authenticate against the server.",
        "operationId": "Satori_Authenticate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAuthenticateRequest"
            }
          }
        ],
        "tags": [
          "Satori"
        ],
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/v1/authenticate/logout": {
      "post": {
        "summary": "Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.",
        "operationId": "Satori_AuthenticateLogout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAuthenticateLogoutRequest"
            }
          }
        ],
        "tags": [
          "Satori"
        ]
      }
    },
    "/v1/authenticate/refresh": {
      "post": {
        "summary": "Refresh a user's session using a refresh token retrieved from a previous authentication request.",
        "operationId": "Satori_AuthenticateRefresh",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Authenticate against the server with a refresh token.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAuthenticateRefreshRequest"
            }
          }
        ],
        "tags": [
          "Satori"
        ],
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/v1/event": {
      "post": {
        "summary": "Publish an event for this session.",
        "operationId": "Satori_Event",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEventRequest"
            }
          }
        ],
        "tags": [
          "Satori"
        ]
      }
    },
    "/v1/experiment": {
      "get": {
        "summary": "Get or list all available experiments for this identity.",
        "operationId": "Satori_GetExperiments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiExperimentList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "names",
            "description": "Experiment names; if empty string all experiments are returned.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Satori"
        ]
      }
    },
    "/v1/flag": {
      "get": {
        "summary": "List all available flags for this identity.",
        "operationId": "Satori_GetFlags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiFlagList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "names",
            "description": "Flag names; if empty string all flags are returned.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Satori"
        ],
        "security": [
          {
            "BearerJwt": [],
            "HttpKeyAuth": []
          }
        ]
      }
    },
    "/v1/identify": {
      "put": {
        "summary": "Enrich/replace the current session with new identifier.",
        "operationId": "Satori_Identify",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Enrich/replace the current session with a new ID.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiIdentifyRequest"
            }
          }
        ],
        "tags": [
          "Satori"
        ]
      }
    },
    "/v1/identity": {
      "delete": {
        "summary": "Delete the caller's identity and associated data.",
        "operationId": "Satori_DeleteIdentity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Satori"
        ]
      }
    },
    "/v1/live-event": {
      "get": {
        "summary": "List available live events.",
        "operationId": "Satori_GetLiveEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLiveEventList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "names",
            "description": "Live event names; if empty string all live events are returned.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Satori"
        ]
      }
    },
    "/v1/message": {
      "get": {
        "summary": "Get the list of messages for the identity.",
        "operationId": "Satori_GetMessageList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetMessageListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Max number of messages to return. Between 1 and 100.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "forward",
            "description": "True if listing should be older messages to newer, false if reverse.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "cursor",
            "description": "A pagination cursor, if any.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Satori"
        ]
      }
    },
    "/v1/message/{id}": {
      "delete": {
        "summary": "Deletes a message for an identity.",
        "operationId": "Satori_DeleteMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the message.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Satori"
        ]
      },
      "put": {
        "summary": "Updates a message for an identity.",
        "operationId": "Satori_UpdateMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the messages.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "readTime": {
                  "type": "string",
                  "format": "int64",
                  "description": "The time the message was read at the client."
                },
                "consumeTime": {
                  "type": "string",
                  "format": "int64",
                  "description": "The time the message was consumed by the identity."
                }
              },
              "description": "The request to update the status of a message."
            }
          }
        ],
        "tags": [
          "Satori"
        ]
      }
    },
    "/v1/properties": {
      "get": {
        "summary": "List properties associated with this identity.",
        "operationId": "Satori_ListProperties",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiProperties"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Satori"
        ]
      },
      "put": {
        "summary": "Update identity properties.",
        "operationId": "Satori_UpdateProperties",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Update Properties associated with this identity.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdatePropertiesRequest"
            }
          }
        ],
        "tags": [
          "Satori"
        ]
      }
    }
  },
  "definitions": {
    "apiAuthenticateLogoutRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Session token to log out."
        },
        "refreshToken": {
          "type": "string",
          "description": "Refresh token to invalidate."
        }
      },
      "description": "Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user."
    },
    "apiAuthenticateRefreshRequest": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string",
          "description": "Refresh token."
        }
      },
      "description": "Authenticate against the server with a refresh token."
    },
    "apiAuthenticateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identity ID. Must be between eight and 128 characters (inclusive).\nMust be an alphanumeric string with only underscores and hyphens allowed."
        },
        "default": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional default properties to update with this call.\nIf not set, properties are left as they are on the server."
        },
        "custom": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional custom properties to update with this call.\nIf not set, properties are left as they are on the server."
        }
      },
      "title": "Authentication request"
    },
    "apiEvent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Event name."
        },
        "id": {
          "type": "string",
          "description": "Optional event ID assigned by the client, used to de-duplicate in retransmission scenarios.\nIf not supplied the server will assign a randomly generated unique event identifier."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Event metadata, if any."
        },
        "value": {
          "type": "string",
          "description": "Optional value."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the event was triggered on the producer side."
        }
      },
      "description": "A single event. Usually, but not necessarily, part of a batch."
    },
    "apiEventRequest": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiEvent"
          },
          "description": "Some number of events produced by a client."
        }
      },
      "title": "Publish an event to the server"
    },
    "apiExperiment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Experiment name"
        },
        "value": {
          "type": "string",
          "description": "Value associated with this Experiment."
        }
      },
      "description": "An experiment that this user is partaking."
    },
    "apiExperimentList": {
      "type": "object",
      "properties": {
        "experiments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiExperiment"
          },
          "description": "All experiments for this identity."
        }
      },
      "description": "All experiments that this identity is involved with."
    },
    "apiFlag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Flag name"
        },
        "value": {
          "type": "string",
          "description": "Value associated with this flag."
        },
        "conditionChanged": {
          "type": "boolean",
          "description": "Whether the value for this flag has conditionally changed from the default state."
        }
      },
      "description": "Feature flag available to the identity."
    },
    "apiFlagList": {
      "type": "object",
      "properties": {
        "flags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiFlag"
          },
          "title": "All flags"
        }
      },
      "title": "All flags available to the identity"
    },
    "apiGetMessageListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiMessage"
          },
          "description": "The list of messages."
        },
        "nextCursor": {
          "type": "string",
          "description": "The cursor to send when retrieving the next page, if any."
        },
        "prevCursor": {
          "type": "string",
          "description": "The cursor to send when retrieving the previous page, if any."
        },
        "cacheableCursor": {
          "type": "string",
          "description": "Cacheable cursor to list newer messages. Durable and designed to be stored, unlike next/prev cursors."
        }
      },
      "description": "A response containing all the messages for an identity."
    },
    "apiIdentifyRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identity ID to enrich the current session and return a new session. Old session will no longer be usable."
        },
        "default": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional default properties to update with this call.\nIf not set, properties are left as they are on the server."
        },
        "custom": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional custom properties to update with this call.\nIf not set, properties are left as they are on the server."
        }
      },
      "description": "Enrich/replace the current session with a new ID."
    },
    "apiLiveEvent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name."
        },
        "description": {
          "type": "string",
          "description": "Description."
        },
        "value": {
          "type": "string",
          "description": "Event value."
        },
        "activeStartTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Start time of current event run."
        },
        "activeEndTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "End time of current event run."
        },
        "id": {
          "type": "string",
          "description": "The live event identifier."
        }
      },
      "description": "A single live event."
    },
    "apiLiveEventList": {
      "type": "object",
      "properties": {
        "liveEvents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLiveEvent"
          },
          "description": "Live events."
        }
      },
      "description": "List of Live events."
    },
    "apiMessage": {
      "type": "object",
      "properties": {
        "scheduleId": {
          "type": "string",
          "description": "The identifier of the schedule."
        },
        "sendTime": {
          "type": "string",
          "format": "int64",
          "description": "The send time for the message."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A key-value pairs of metadata."
        },
        "createTime": {
          "type": "string",
          "format": "int64",
          "description": "The time the message was created."
        },
        "updateTime": {
          "type": "string",
          "format": "int64",
          "description": "The time the message was updated."
        },
        "readTime": {
          "type": "string",
          "format": "int64",
          "description": "The time the message was read by the client."
        },
        "consumeTime": {
          "type": "string",
          "format": "int64",
          "description": "The time the message was consumed by the identity."
        },
        "text": {
          "type": "string",
          "description": "The message's text."
        }
      },
      "description": "A scheduled message."
    },
    "apiProperties": {
      "type": "object",
      "properties": {
        "default": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Event default properties."
        },
        "computed": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Event computed properties."
        },
        "custom": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Event custom properties."
        }
      },
      "description": "Properties associated with an identity."
    },
    "apiSession": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Token credential."
        },
        "refreshToken": {
          "type": "string",
          "description": "Refresh token."
        },
        "properties": {
          "$ref": "#/definitions/apiProperties",
          "description": "Properties associated with this identity."
        }
      },
      "description": "A session."
    },
    "apiUpdatePropertiesRequest": {
      "type": "object",
      "properties": {
        "default": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Event default properties."
        },
        "custom": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Event custom properties."
        },
        "recompute": {
          "type": "boolean",
          "description": "Informs the server to recompute the audience membership of the identity."
        }
      },
      "description": "Update Properties associated with this identity."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "BasicAuth": {
      "type": "basic"
    },
    "BearerJwt": {
      "type": ""
    }
  },
  "security": [
    {
      "BearerJwt": []
    }
  ]
}
