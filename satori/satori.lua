-- Code generated by codegen/generate.py. DO NOT EDIT.

--[[--
The Satori client SDK for Defold.

@module satori
]]


local M = {}

--- Log function for Satori functions
-- Replace with your own log function
function M.log(...) print(...) end

local function log(...) M.log(...) end

-- helpers for parameter type checking
local function check_array(v) return type(v) == "table" end
local function check_string(v) return type(v) == "string" end
local function check_integer(v) return type(v) == "number" end
local function check_object(v) return type(v) == "table" end
local function check_boolean(v) return type(v) == "boolean" end

-- helpers for definition type checking
local check_api_authenticate_logout_request = nil
local check_api_authenticate_refresh_request = nil
local check_api_authenticate_request = nil
local check_api_event = nil
local check_api_event_request = nil
local check_api_experiment = nil
local check_api_experiment_list = nil
local check_api_flag = nil
local check_api_flag_list = nil
local check_api_get_message_list_response = nil
local check_api_identify_request = nil
local check_api_live_event = nil
local check_api_live_event_list = nil
local check_api_message = nil
local check_api_properties = nil
local check_api_session = nil
local check_api_update_properties_request = nil
local check_protobuf_any = nil
local check_rpc_status = nil
check_api_authenticate_logout_request = function(v)
	assert(check_string(v["token"]), "You must provide property 'token' of type 'string'")
	assert(check_string(v["refreshToken"]), "You must provide property 'refreshToken' of type 'string'")
end
check_api_authenticate_refresh_request = function(v)
	assert(check_string(v["refreshToken"]), "You must provide property 'refreshToken' of type 'string'")
end
check_api_authenticate_request = function(v)
	assert(check_string(v["id"]), "You must provide property 'id' of type 'string'")
	assert(check_object(v["default"]), "You must provide property 'default' of type 'object'")
	assert(check_object(v["custom"]), "You must provide property 'custom' of type 'object'")
end
check_api_event = function(v)
	assert(check_string(v["name"]), "You must provide property 'name' of type 'string'")
	assert(check_string(v["id"]), "You must provide property 'id' of type 'string'")
	assert(check_object(v["metadata"]), "You must provide property 'metadata' of type 'object'")
	assert(check_string(v["value"]), "You must provide property 'value' of type 'string'")
	assert(check_string(v["timestamp"]), "You must provide property 'timestamp' of type 'string'")
end
check_api_event_request = function(v)
	assert(check_array(v["events"]), "You must provide property 'events' of type 'array'")
end
check_api_experiment = function(v)
	assert(check_string(v["name"]), "You must provide property 'name' of type 'string'")
	assert(check_string(v["value"]), "You must provide property 'value' of type 'string'")
end
check_api_experiment_list = function(v)
	assert(check_array(v["experiments"]), "You must provide property 'experiments' of type 'array'")
end
check_api_flag = function(v)
	assert(check_string(v["name"]), "You must provide property 'name' of type 'string'")
	assert(check_string(v["value"]), "You must provide property 'value' of type 'string'")
	assert(check_boolean(v["conditionChanged"]), "You must provide property 'conditionChanged' of type 'boolean'")
end
check_api_flag_list = function(v)
	assert(check_array(v["flags"]), "You must provide property 'flags' of type 'array'")
end
check_api_get_message_list_response = function(v)
	assert(check_array(v["messages"]), "You must provide property 'messages' of type 'array'")
	assert(check_string(v["nextCursor"]), "You must provide property 'nextCursor' of type 'string'")
	assert(check_string(v["prevCursor"]), "You must provide property 'prevCursor' of type 'string'")
	assert(check_string(v["cacheableCursor"]), "You must provide property 'cacheableCursor' of type 'string'")
end
check_api_identify_request = function(v)
	assert(check_string(v["id"]), "You must provide property 'id' of type 'string'")
	assert(check_object(v["default"]), "You must provide property 'default' of type 'object'")
	assert(check_object(v["custom"]), "You must provide property 'custom' of type 'object'")
end
check_api_live_event = function(v)
	assert(check_string(v["name"]), "You must provide property 'name' of type 'string'")
	assert(check_string(v["description"]), "You must provide property 'description' of type 'string'")
	assert(check_string(v["value"]), "You must provide property 'value' of type 'string'")
	assert(check_string(v["activeStartTimeSec"]), "You must provide property 'activeStartTimeSec' of type 'string'")
	assert(check_string(v["activeEndTimeSec"]), "You must provide property 'activeEndTimeSec' of type 'string'")
	assert(check_string(v["id"]), "You must provide property 'id' of type 'string'")
end
check_api_live_event_list = function(v)
	assert(check_array(v["liveEvents"]), "You must provide property 'liveEvents' of type 'array'")
end
check_api_message = function(v)
	assert(check_string(v["scheduleId"]), "You must provide property 'scheduleId' of type 'string'")
	assert(check_string(v["sendTime"]), "You must provide property 'sendTime' of type 'string'")
	assert(check_object(v["metadata"]), "You must provide property 'metadata' of type 'object'")
	assert(check_string(v["createTime"]), "You must provide property 'createTime' of type 'string'")
	assert(check_string(v["updateTime"]), "You must provide property 'updateTime' of type 'string'")
	assert(check_string(v["readTime"]), "You must provide property 'readTime' of type 'string'")
	assert(check_string(v["consumeTime"]), "You must provide property 'consumeTime' of type 'string'")
	assert(check_string(v["text"]), "You must provide property 'text' of type 'string'")
end
check_api_properties = function(v)
	assert(check_object(v["default"]), "You must provide property 'default' of type 'object'")
	assert(check_object(v["computed"]), "You must provide property 'computed' of type 'object'")
	assert(check_object(v["custom"]), "You must provide property 'custom' of type 'object'")
end
check_api_session = function(v)
	assert(check_string(v["token"]), "You must provide property 'token' of type 'string'")
	assert(check_string(v["refreshToken"]), "You must provide property 'refreshToken' of type 'string'")
	assert(check_api_properties(v["api_properties"]), "You must provide property 'api_properties' of type 'api_properties'")
end
check_api_update_properties_request = function(v)
	assert(check_object(v["default"]), "You must provide property 'default' of type 'object'")
	assert(check_object(v["custom"]), "You must provide property 'custom' of type 'object'")
	assert(check_boolean(v["recompute"]), "You must provide property 'recompute' of type 'boolean'")
end
check_protobuf_any = function(v)
	assert(check_string(v["@type"]), "You must provide property '@type' of type 'string'")
end
check_rpc_status = function(v)
	assert(check_integer(v["code"]), "You must provide property 'code' of type 'integer'")
	assert(check_string(v["message"]), "You must provide property 'message' of type 'string'")
	assert(check_array(v["details"]), "You must provide property 'details' of type 'array'")
end


--- Create a Satori client instance.
-- @param config A table of configuration options.
-- config.host
-- config.port
-- @return Satori Client instance.
function M.create_client(config)
	assert(config, "You must provide a configuration")
	assert(config.host, "You must provide a host")
	assert(config.port, "You must provide a port")
	log("create_client()")

	local client = {}
	local scheme = config.use_ssl and "https" or "http"
	client.config = {}
	client.config.host = config.host
	client.config.port = config.port
	client.config.http_uri = ("%s://%s:%d"):format(scheme, config.host, config.port)

	local ignored_fns = { create_client = true, log = true }
	for name,fn in pairs(M) do
		if not ignored_fns[name] and type(fn) == "function" then
			log("setting " .. name)
			client[name] = function(...) return fn(client, ...) end
		end
	end

	return client
end


--- healthcheck
-- A healthcheck which load balancers can use to check the service.
-- @param client
-- @param callback
function M.healthcheck(client, callback)
	log("healthcheck()")
	assert(client, "You must provide a Satori client")

	local config = client.config
	local options = {}
	local url_path = "/healthcheck"
	local url = ("%s%s"):format(config.http_uri, url_path)

	local post_data = nil

	http.request(url, "GET", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- readycheck
-- A readycheck which load balancers can use to check the service.
-- @param client
-- @param callback
function M.readycheck(client, callback)
	log("readycheck()")
	assert(client, "You must provide a Satori client")

	local config = client.config
	local options = {}
	local url_path = "/readycheck"
	local url = ("%s%s"):format(config.http_uri, url_path)

	local post_data = nil

	http.request(url, "GET", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- authenticate
-- Authenticate against the server.
-- @param client
-- @param body  Authentication request (REQUIRED)
-- @param callback
function M.authenticate(client, body, callback)
	log("authenticate()")
	assert(client, "You must provide a Satori client")
	assert(check_api_authenticate_request(body), "You must provide parameter 'body' of type 'api_authenticate_request'")

	local config = client.config
	local options = {}
	local url_path = "/v1/authenticate"
	local url = ("%s%s"):format(config.http_uri, url_path)

	local params = {}
	params["body"] = body
	local post_data = json.encode(params)

	http.request(url, "POST", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- authenticate_logout
-- Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
-- @param client
-- @param body Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.  (REQUIRED)
-- @param callback
function M.authenticate_logout(client, body, callback)
	log("authenticate_logout()")
	assert(client, "You must provide a Satori client")
	assert(check_api_authenticate_logout_request(body), "You must provide parameter 'body' of type 'api_authenticate_logout_request'")

	local config = client.config
	local options = {}
	local url_path = "/v1/authenticate/logout"
	local url = ("%s%s"):format(config.http_uri, url_path)

	local params = {}
	params["body"] = body
	local post_data = json.encode(params)

	http.request(url, "POST", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- authenticate_refresh
-- Refresh a user&#x27;s session using a refresh token retrieved from a previous authentication request.
-- @param client
-- @param body Authenticate against the server with a refresh token.  (REQUIRED)
-- @param callback
function M.authenticate_refresh(client, body, callback)
	log("authenticate_refresh()")
	assert(client, "You must provide a Satori client")
	assert(check_api_authenticate_refresh_request(body), "You must provide parameter 'body' of type 'api_authenticate_refresh_request'")

	local config = client.config
	local options = {}
	local url_path = "/v1/authenticate/refresh"
	local url = ("%s%s"):format(config.http_uri, url_path)

	local params = {}
	params["body"] = body
	local post_data = json.encode(params)

	http.request(url, "POST", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- event
-- Publish an event for this session.
-- @param client
-- @param body  Publish an event to the server (REQUIRED)
-- @param callback
function M.event(client, body, callback)
	log("event()")
	assert(client, "You must provide a Satori client")
	assert(check_api_event_request(body), "You must provide parameter 'body' of type 'api_event_request'")

	local config = client.config
	local options = {}
	local url_path = "/v1/event"
	local url = ("%s%s"):format(config.http_uri, url_path)

	local params = {}
	params["body"] = body
	local post_data = json.encode(params)

	http.request(url, "POST", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- get_experiments
-- Get or list all available experiments for this identity.
-- @param client
-- @param names Experiment names; if empty string all experiments are returned. 
-- @param callback
function M.get_experiments(client, names, callback)
	log("get_experiments()")
	assert(client, "You must provide a Satori client")

	local config = client.config
	local options = {}
	local url_path = "/v1/experiment"
	local url = ("%s%s"):format(config.http_uri, url_path)
	url = url .. "?a=b"
	.. "&names=" .. names

	local post_data = nil

	http.request(url, "GET", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- get_flags
-- List all available flags for this identity.
-- @param client
-- @param names Flag names; if empty string all flags are returned. 
-- @param callback
function M.get_flags(client, names, callback)
	log("get_flags()")
	assert(client, "You must provide a Satori client")

	local config = client.config
	local options = {}
	local url_path = "/v1/flag"
	local url = ("%s%s"):format(config.http_uri, url_path)
	url = url .. "?a=b"
	.. "&names=" .. names

	local post_data = nil

	http.request(url, "GET", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- identify
-- Enrich/replace the current session with new identifier.
-- @param client
-- @param body Enrich/replace the current session with a new ID.  (REQUIRED)
-- @param callback
function M.identify(client, body, callback)
	log("identify()")
	assert(client, "You must provide a Satori client")
	assert(check_api_identify_request(body), "You must provide parameter 'body' of type 'api_identify_request'")

	local config = client.config
	local options = {}
	local url_path = "/v1/identify"
	local url = ("%s%s"):format(config.http_uri, url_path)

	local params = {}
	params["body"] = body
	local post_data = json.encode(params)

	http.request(url, "PUT", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- delete_identity
-- Delete the caller&#x27;s identity and associated data.
-- @param client
-- @param callback
function M.delete_identity(client, callback)
	log("delete_identity()")
	assert(client, "You must provide a Satori client")

	local config = client.config
	local options = {}
	local url_path = "/v1/identity"
	local url = ("%s%s"):format(config.http_uri, url_path)

	local post_data = nil

	http.request(url, "DELETE", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- get_live_events
-- List available live events.
-- @param client
-- @param names Live event names; if empty string all live events are returned. 
-- @param callback
function M.get_live_events(client, names, callback)
	log("get_live_events()")
	assert(client, "You must provide a Satori client")

	local config = client.config
	local options = {}
	local url_path = "/v1/live-event"
	local url = ("%s%s"):format(config.http_uri, url_path)
	url = url .. "?a=b"
	.. "&names=" .. names

	local post_data = nil

	http.request(url, "GET", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- get_message_list
-- Get the list of messages for the identity.
-- @param client
-- @param limit Max number of messages to return. Between 1 and 100. 
-- @param forward True if listing should be older messages to newer, false if reverse. 
-- @param cursor A pagination cursor, if any. 
-- @param callback
function M.get_message_list(client, limit, forward, cursor, callback)
	log("get_message_list()")
	assert(client, "You must provide a Satori client")

	local config = client.config
	local options = {}
	local url_path = "/v1/message"
	local url = ("%s%s"):format(config.http_uri, url_path)
	url = url .. "?a=b"
	.. "&limit=" .. limit
	.. "&forward=" .. forward
	.. "&cursor=" .. cursor

	local post_data = nil

	http.request(url, "GET", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- delete_message
-- Deletes a message for an identity.
-- @param client
-- @param id The identifier of the message.  (REQUIRED)
-- @param callback
function M.delete_message(client, id, callback)
	log("delete_message()")
	assert(client, "You must provide a Satori client")
	assert(check_string(id), "You must provide parameter 'id' of type 'string'")

	local config = client.config
	local options = {}
	local url_path = "/v1/message/{id}"
	url_path = url_path:gsub("{" .. "id" .. "}", id)
	local url = ("%s%s"):format(config.http_uri, url_path)

	local post_data = nil

	http.request(url, "DELETE", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- update_message
-- Updates a message for an identity.
-- @param client
-- @param id The identifier of the messages.  (REQUIRED)
-- @param body The request to update the status of a message.  (REQUIRED)
-- @param callback
function M.update_message(client, id, body, callback)
	log("update_message()")
	assert(client, "You must provide a Satori client")
	assert(check_string(id), "You must provide parameter 'id' of type 'string'")
	assert(check_object(body), "You must provide parameter 'body' of type 'object'")

	local config = client.config
	local options = {}
	local url_path = "/v1/message/{id}"
	url_path = url_path:gsub("{" .. "id" .. "}", id)
	url_path = url_path:gsub("{" .. "body" .. "}", body)
	local url = ("%s%s"):format(config.http_uri, url_path)

	local params = {}
	params["body"] = body
	local post_data = json.encode(params)

	http.request(url, "PUT", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- list_properties
-- List properties associated with this identity.
-- @param client
-- @param callback
function M.list_properties(client, callback)
	log("list_properties()")
	assert(client, "You must provide a Satori client")

	local config = client.config
	local options = {}
	local url_path = "/v1/properties"
	local url = ("%s%s"):format(config.http_uri, url_path)

	local post_data = nil

	http.request(url, "GET", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end

--- update_properties
-- Update identity properties.
-- @param client
-- @param body Update Properties associated with this identity.  (REQUIRED)
-- @param callback
function M.update_properties(client, body, callback)
	log("update_properties()")
	assert(client, "You must provide a Satori client")
	assert(check_api_update_properties_request(body), "You must provide parameter 'body' of type 'api_update_properties_request'")

	local config = client.config
	local options = {}
	local url_path = "/v1/properties"
	local url = ("%s%s"):format(config.http_uri, url_path)

	local params = {}
	params["body"] = body
	local post_data = json.encode(params)

	http.request(url, "PUT", function(self, id, response)
		-- A successful response.
		if response.code == 200 then
			if callback then callback(response) end
			return
		end
		-- An unexpected error response.
		if callback then callback(response) end
	end,
	post_data, options)
end



return M