-- Code generated by codegen/main.go. DO NOT EDIT.

--[[--
The Nakama client SDK for Defold.

@module nakama
]]

local json = require "nakama.util.json"
local b64 = require "nakama.util.b64"
local log = require "nakama.util.log"
local async = require "nakama.util.async"
local retries = require "nakama.util.retries"
local api_session = require "nakama.session"
local socket = require "nakama.socket"

local uri = require "nakama.util.uri"
local uri_encode = uri.encode

local M = {}

--
-- Defines
--

--- api_operator
-- Operator that can be used to override the one set in the leaderboard.
--
-- - NO_OVERRIDE: Do not override the leaderboard operator.
-- - BEST: Override the leaderboard operator with BEST.
-- - SET: Override the leaderboard operator with SET.
-- - INCREMENT: Override the leaderboard operator with INCREMENT.
-- - DECREMENT: Override the leaderboard operator with DECREMENT.
M.APIOPERATOR_NO_OVERRIDE = "NO_OVERRIDE"
M.APIOPERATOR_BEST = "BEST"
M.APIOPERATOR_SET = "SET"
M.APIOPERATOR_INCREMENT = "INCREMENT"
M.APIOPERATOR_DECREMENT = "DECREMENT"

--- api_store_environment
-- - UNKNOWN: Unknown environment.
-- - SANDBOX: Sandbox/test environment.
-- - PRODUCTION: Production environment.
M.APISTOREENVIRONMENT_UNKNOWN = "UNKNOWN"
M.APISTOREENVIRONMENT_SANDBOX = "SANDBOX"
M.APISTOREENVIRONMENT_PRODUCTION = "PRODUCTION"

--- api_store_provider
-- - APPLE_APP_STORE: Apple App Store
-- - GOOGLE_PLAY_STORE: Google Play Store
-- - HUAWEI_APP_GALLERY: Huawei App Gallery
M.APISTOREPROVIDER_APPLE_APP_STORE = "APPLE_APP_STORE"
M.APISTOREPROVIDER_GOOGLE_PLAY_STORE = "GOOGLE_PLAY_STORE"
M.APISTOREPROVIDER_HUAWEI_APP_GALLERY = "HUAWEI_APP_GALLERY"

--
-- The low level client for the Nakama API.
--

local _config = {}


--- Create a Nakama client instance.
-- @param config A table of configuration options.
-- config.engine - Engine specific implementations.
-- config.host
-- config.port
-- config.timeout
-- config.use_ssl - Use secure or non-secure sockets.
-- config.bearer_token
-- config.username
-- config.password
-- @return Nakama Client instance.
function M.create_client(config)
	assert(config, "You must provide a configuration")
	assert(config.host, "You must provide a host")
	assert(config.port, "You must provide a port")
	assert(config.engine, "You must provide an engine")
	assert(type(config.engine.http) == "function", "The engine must provide the 'http' function")
	assert(type(config.engine.socket_create) == "function", "The engine must provide the 'socket_create' function")
	assert(type(config.engine.socket_connect) == "function", "The engine must provide the 'socket_connect' function")
	assert(type(config.engine.socket_send) == "function", "The engine must provide the 'socket_send' function")
	log("init()")

	local client = {}
	local scheme = config.use_ssl and "https" or "http"
	client.engine = config.engine
	client.config = {}
	client.config.host = config.host
	client.config.port = config.port
	client.config.http_uri = ("%s://%s:%d"):format(scheme, config.host, config.port)
	client.config.bearer_token = config.bearer_token
	client.config.username = config.username
	client.config.password = config.password
	client.config.timeout = config.timeout or 10
	client.config.use_ssl = config.use_ssl
	client.config.retry_policy = config.retry_policy or retries.none()

	local ignored_fns = { create_client = true, sync = true }
	for name,fn in pairs(M) do
		if not ignored_fns[name] and type(fn) == "function" then
			log("setting " .. name)
			client[name] = function(...) return fn(client, ...) end
		end
	end

	return client
end


--- Create a Nakama socket.
-- @param client The client to create the socket for.
-- @return Socket instance.
function M.create_socket(client)
	assert(client, "You must provide a client")
	return socket.create(client)
end

--- Set Nakama client bearer token.
-- @param client Nakama client.
-- @param bearer_token Authorization bearer token.
function M.set_bearer_token(client, bearer_token)
	assert(client, "You must provide a client")
	client.config.bearer_token = bearer_token
end


-- cancellation tokens associated with a coroutine
local cancellation_tokens = {}

-- cancel a cancellation token
function M.cancel(token)
	assert(token)
	token.cancelled = true
end

-- create a cancellation token
-- use this to cancel an ongoing API call or a sequence of API calls
-- @return token Pass the token to a call to nakama.sync() or to any of the API calls
function M.cancellation_token()
	local token = {
		cancelled = false
	}
	function token.cancel()
		token.cancelled = true
	end
	return token
end

-- Private
-- Run code within a coroutine
-- @param fn The code to run
-- @param cancellation_token Optional cancellation token to cancel the running code
function M.sync(fn, cancellation_token)
	assert(fn)
	local co = nil
	co = coroutine.create(function()
		cancellation_tokens[co] = cancellation_token
		fn()
		cancellation_tokens[co] = nil
	end)
	local ok, err = coroutine.resume(co)
	if not ok then
		log(err)
		cancellation_tokens[co] = nil
	end
end

--
-- Nakama REST API
--

-- http request helper used to reduce code duplication in all API functions below
local function http(client, callback, url_path, query_params, method, post_data, retry_policy, cancellation_token, handler_fn)
	if callback then
		log(url_path, "with callback")
		client.engine.http(client.config, url_path, query_params, method, post_data, retry_policy, cancellation_token, function(result)
			if not cancellation_token or not cancellation_token.cancelled then
				callback(handler_fn(result))
			end
		end)
	else
		log(url_path, "with coroutine")
		local co = coroutine.running()
		assert(co, "You must be running this from withing a coroutine")

		-- get cancellation token associated with this coroutine
		cancellation_token = cancellation_tokens[co]
		if cancellation_token and cancellation_token.cancelled then
			cancellation_tokens[co] = nil
			return
		end

		return async(function(done)
			client.engine.http(client.config, url_path, query_params, method, post_data, retry_policy, cancellation_token, function(result)
				if cancellation_token and cancellation_token.cancelled then
					cancellation_tokens[co] = nil
					return
				end
				done(handler_fn(result))
			end)
		end)
	end
end

--- healthcheck
-- A healthcheck which load balancers can use to check the service.
-- @param client Nakama client.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.healthcheck(client, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/healthcheck"

	local query_params = {}

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- get_account
-- Fetch the current user's account.
-- @param client Nakama client.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.get_account(client, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/account"

	local query_params = {}

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_account then
			result = api_account.create(result)
		end
		return result
	end)
end

--- update_account
-- Update fields in the current user's account.
-- @param client Nakama client.
-- @param avatarUrl (string) A URL for an avatar image.
-- @param displayName (string) The display name of the user.
-- @param langTag (string) The language expected to be a tag which follows the BCP-47 spec.
-- @param location (string) The location set by the user.
-- @param timezone (string) The timezone set by the user.
-- @param username (string) The username of the user's account.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.update_account(client, avatarUrl, displayName, langTag, location, timezone, username, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not avatarUrl or type(avatarUrl) == "string", "Argument 'avatarUrl' must be 'nil' or of type 'string'")
	assert(not displayName or type(displayName) == "string", "Argument 'displayName' must be 'nil' or of type 'string'")
	assert(not langTag or type(langTag) == "string", "Argument 'langTag' must be 'nil' or of type 'string'")
	assert(not location or type(location) == "string", "Argument 'location' must be 'nil' or of type 'string'")
	assert(not timezone or type(timezone) == "string", "Argument 'timezone' must be 'nil' or of type 'string'")
	assert(not username or type(username) == "string", "Argument 'username' must be 'nil' or of type 'string'")


	local url_path = "/v2/account"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	avatarUrl = avatarUrl,
	displayName = displayName,
	langTag = langTag,
	location = location,
	timezone = timezone,
	username = username,
	})

	return http(client, callback, url_path, query_params, "PUT", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- authenticate_apple
-- Authenticate a user with an Apple ID against the server.
-- @param client Nakama client.
-- @param token (string) The ID token received from Apple to validate.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param create_bool () Register the account if the user does not already exist.
-- @param username_str () Set the username on the account at register. Must be unique.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.authenticate_apple(client, token, vars, create_bool, username_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")

	-- unset the token so username+password credentials will be used
	client.config.bearer_token = nil

	local url_path = "/v2/account/authenticate/apple"

	local query_params = {}
	query_params["create"] = create_bool
	query_params["username"] = username_str

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_session then
			result = api_session.create(result)
		end
		return result
	end)
end

--- authenticate_custom
-- Authenticate a user with a custom id against the server.
-- @param client Nakama client.
-- @param id (string) A custom identifier.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param create_bool () Register the account if the user does not already exist.
-- @param username_str () Set the username on the account at register. Must be unique.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.authenticate_custom(client, id, vars, create_bool, username_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not id or type(id) == "string", "Argument 'id' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")

	-- unset the token so username+password credentials will be used
	client.config.bearer_token = nil

	local url_path = "/v2/account/authenticate/custom"

	local query_params = {}
	query_params["create"] = create_bool
	query_params["username"] = username_str

	local post_data = nil
	post_data = json.encode({
	id = id,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_session then
			result = api_session.create(result)
		end
		return result
	end)
end

--- authenticate_device
-- Authenticate a user with a device id against the server.
-- @param client Nakama client.
-- @param id (string) A device identifier. Should be obtained by a platform-specific device API.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param create_bool () Register the account if the user does not already exist.
-- @param username_str () Set the username on the account at register. Must be unique.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.authenticate_device(client, id, vars, create_bool, username_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not id or type(id) == "string", "Argument 'id' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")

	-- unset the token so username+password credentials will be used
	client.config.bearer_token = nil

	local url_path = "/v2/account/authenticate/device"

	local query_params = {}
	query_params["create"] = create_bool
	query_params["username"] = username_str

	local post_data = nil
	post_data = json.encode({
	id = id,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_session then
			result = api_session.create(result)
		end
		return result
	end)
end

--- authenticate_email
-- Authenticate a user with an email+password against the server.
-- @param client Nakama client.
-- @param email (string) A valid RFC-5322 email address.
-- @param password (string) A password for the user account.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param create_bool () Register the account if the user does not already exist.
-- @param username_str () Set the username on the account at register. Must be unique.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.authenticate_email(client, email, password, vars, create_bool, username_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not email or type(email) == "string", "Argument 'email' must be 'nil' or of type 'string'")
	assert(not password or type(password) == "string", "Argument 'password' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")

	-- unset the token so username+password credentials will be used
	client.config.bearer_token = nil

	local url_path = "/v2/account/authenticate/email"

	local query_params = {}
	query_params["create"] = create_bool
	query_params["username"] = username_str

	local post_data = nil
	post_data = json.encode({
	email = email,
	password = password,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_session then
			result = api_session.create(result)
		end
		return result
	end)
end

--- authenticate_facebook
-- Authenticate a user with a Facebook OAuth token against the server.
-- @param client Nakama client.
-- @param token (string) The OAuth token received from Facebook to access their profile API.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param create_bool () Register the account if the user does not already exist.
-- @param username_str () Set the username on the account at register. Must be unique.
-- @param sync_bool () Import Facebook friends for the user.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.authenticate_facebook(client, token, vars, create_bool, username_str, sync_bool, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")

	-- unset the token so username+password credentials will be used
	client.config.bearer_token = nil

	local url_path = "/v2/account/authenticate/facebook"

	local query_params = {}
	query_params["create"] = create_bool
	query_params["username"] = username_str
	query_params["sync"] = sync_bool

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_session then
			result = api_session.create(result)
		end
		return result
	end)
end

--- authenticate_facebook_instant_game
-- Authenticate a user with a Facebook Instant Game token against the server.
-- @param client Nakama client.
-- @param signedPlayerInfo (string) 
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param create_bool () Register the account if the user does not already exist.
-- @param username_str () Set the username on the account at register. Must be unique.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.authenticate_facebook_instant_game(client, signedPlayerInfo, vars, create_bool, username_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not signedPlayerInfo or type(signedPlayerInfo) == "string", "Argument 'signedPlayerInfo' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")

	-- unset the token so username+password credentials will be used
	client.config.bearer_token = nil

	local url_path = "/v2/account/authenticate/facebookinstantgame"

	local query_params = {}
	query_params["create"] = create_bool
	query_params["username"] = username_str

	local post_data = nil
	post_data = json.encode({
	signedPlayerInfo = signedPlayerInfo,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_session then
			result = api_session.create(result)
		end
		return result
	end)
end

--- authenticate_game_center
-- Authenticate a user with Apple's GameCenter against the server.
-- @param client Nakama client.
-- @param bundleId (string) Bundle ID (generated by GameCenter).
-- @param playerId (string) Player ID (generated by GameCenter).
-- @param publicKeyUrl (string) The URL for the public encryption key.
-- @param salt (string) A random "NSString" used to compute the hash and keep it randomized.
-- @param signature (string) The verification signature data generated.
-- @param timestampSeconds (string) Time since UNIX epoch when the signature was created.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param create_bool () Register the account if the user does not already exist.
-- @param username_str () Set the username on the account at register. Must be unique.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.authenticate_game_center(client, bundleId, playerId, publicKeyUrl, salt, signature, timestampSeconds, vars, create_bool, username_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not bundleId or type(bundleId) == "string", "Argument 'bundleId' must be 'nil' or of type 'string'")
	assert(not playerId or type(playerId) == "string", "Argument 'playerId' must be 'nil' or of type 'string'")
	assert(not publicKeyUrl or type(publicKeyUrl) == "string", "Argument 'publicKeyUrl' must be 'nil' or of type 'string'")
	assert(not salt or type(salt) == "string", "Argument 'salt' must be 'nil' or of type 'string'")
	assert(not signature or type(signature) == "string", "Argument 'signature' must be 'nil' or of type 'string'")
	assert(not timestampSeconds or type(timestampSeconds) == "string", "Argument 'timestampSeconds' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")

	-- unset the token so username+password credentials will be used
	client.config.bearer_token = nil

	local url_path = "/v2/account/authenticate/gamecenter"

	local query_params = {}
	query_params["create"] = create_bool
	query_params["username"] = username_str

	local post_data = nil
	post_data = json.encode({
	bundleId = bundleId,
	playerId = playerId,
	publicKeyUrl = publicKeyUrl,
	salt = salt,
	signature = signature,
	timestampSeconds = timestampSeconds,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_session then
			result = api_session.create(result)
		end
		return result
	end)
end

--- authenticate_google
-- Authenticate a user with Google against the server.
-- @param client Nakama client.
-- @param token (string) The OAuth token received from Google to access their profile API.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param create_bool () Register the account if the user does not already exist.
-- @param username_str () Set the username on the account at register. Must be unique.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.authenticate_google(client, token, vars, create_bool, username_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")

	-- unset the token so username+password credentials will be used
	client.config.bearer_token = nil

	local url_path = "/v2/account/authenticate/google"

	local query_params = {}
	query_params["create"] = create_bool
	query_params["username"] = username_str

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_session then
			result = api_session.create(result)
		end
		return result
	end)
end

--- authenticate_steam
-- Authenticate a user with Steam against the server.
-- @param client Nakama client.
-- @param token (string) The account token received from Steam to access their profile API.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param create_bool () Register the account if the user does not already exist.
-- @param username_str () Set the username on the account at register. Must be unique.
-- @param sync_bool () Import Steam friends for the user.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.authenticate_steam(client, token, vars, create_bool, username_str, sync_bool, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")

	-- unset the token so username+password credentials will be used
	client.config.bearer_token = nil

	local url_path = "/v2/account/authenticate/steam"

	local query_params = {}
	query_params["create"] = create_bool
	query_params["username"] = username_str
	query_params["sync"] = sync_bool

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_session then
			result = api_session.create(result)
		end
		return result
	end)
end

--- link_apple
-- Add an Apple ID to the social profiles on the current user's account.
-- @param client Nakama client.
-- @param token (string) The ID token received from Apple to validate.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.link_apple(client, token, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/link/apple"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- link_custom
-- Add a custom ID to the social profiles on the current user's account.
-- @param client Nakama client.
-- @param id (string) A custom identifier.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.link_custom(client, id, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not id or type(id) == "string", "Argument 'id' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/link/custom"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	id = id,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- link_device
-- Add a device ID to the social profiles on the current user's account.
-- @param client Nakama client.
-- @param id (string) A device identifier. Should be obtained by a platform-specific device API.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.link_device(client, id, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not id or type(id) == "string", "Argument 'id' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/link/device"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	id = id,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- link_email
-- Add an email+password to the social profiles on the current user's account.
-- @param client Nakama client.
-- @param email (string) A valid RFC-5322 email address.
-- @param password (string) A password for the user account.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.link_email(client, email, password, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not email or type(email) == "string", "Argument 'email' must be 'nil' or of type 'string'")
	assert(not password or type(password) == "string", "Argument 'password' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/link/email"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	email = email,
	password = password,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- link_facebook
-- Add Facebook to the social profiles on the current user's account.
-- @param client Nakama client.
-- @param token (string) The OAuth token received from Facebook to access their profile API.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param sync_bool () Import Facebook friends for the user.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.link_facebook(client, token, vars, sync_bool, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/link/facebook"

	local query_params = {}
	query_params["sync"] = sync_bool

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- link_facebook_instant_game
-- Add Facebook Instant Game to the social profiles on the current user's account.
-- @param client Nakama client.
-- @param signedPlayerInfo (string) 
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.link_facebook_instant_game(client, signedPlayerInfo, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not signedPlayerInfo or type(signedPlayerInfo) == "string", "Argument 'signedPlayerInfo' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/link/facebookinstantgame"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	signedPlayerInfo = signedPlayerInfo,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- link_game_center
-- Add Apple's GameCenter to the social profiles on the current user's account.
-- @param client Nakama client.
-- @param bundleId (string) Bundle ID (generated by GameCenter).
-- @param playerId (string) Player ID (generated by GameCenter).
-- @param publicKeyUrl (string) The URL for the public encryption key.
-- @param salt (string) A random "NSString" used to compute the hash and keep it randomized.
-- @param signature (string) The verification signature data generated.
-- @param timestampSeconds (string) Time since UNIX epoch when the signature was created.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.link_game_center(client, bundleId, playerId, publicKeyUrl, salt, signature, timestampSeconds, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not bundleId or type(bundleId) == "string", "Argument 'bundleId' must be 'nil' or of type 'string'")
	assert(not playerId or type(playerId) == "string", "Argument 'playerId' must be 'nil' or of type 'string'")
	assert(not publicKeyUrl or type(publicKeyUrl) == "string", "Argument 'publicKeyUrl' must be 'nil' or of type 'string'")
	assert(not salt or type(salt) == "string", "Argument 'salt' must be 'nil' or of type 'string'")
	assert(not signature or type(signature) == "string", "Argument 'signature' must be 'nil' or of type 'string'")
	assert(not timestampSeconds or type(timestampSeconds) == "string", "Argument 'timestampSeconds' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/link/gamecenter"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	bundleId = bundleId,
	playerId = playerId,
	publicKeyUrl = publicKeyUrl,
	salt = salt,
	signature = signature,
	timestampSeconds = timestampSeconds,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- link_google
-- Add Google to the social profiles on the current user's account.
-- @param client Nakama client.
-- @param token (string) The OAuth token received from Google to access their profile API.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.link_google(client, token, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/link/google"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- link_steam
-- Add Steam to the social profiles on the current user's account.
-- @param client Nakama client.
-- @param account () The Facebook account details.
-- @param sync (boolean) Import Steam friends for the user.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.link_steam(client, account, sync, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not account or type(account) == "table", "Argument 'account' must be 'nil' or of type 'table'")
	assert(not sync or type(sync) == "boolean", "Argument 'sync' must be 'nil' or of type 'boolean'")


	local url_path = "/v2/account/link/steam"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	account = account,
	sync = sync,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- session_refresh
-- Refresh a user's session using a refresh token retrieved from a previous authentication request.
-- @param client Nakama client.
-- @param token (string) Refresh token.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.session_refresh(client, token, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/session/refresh"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_session then
			result = api_session.create(result)
		end
		return result
	end)
end

--- unlink_apple
-- Remove the Apple ID from the social profiles on the current user's account.
-- @param client Nakama client.
-- @param token (string) The ID token received from Apple to validate.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.unlink_apple(client, token, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/unlink/apple"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- unlink_custom
-- Remove the custom ID from the social profiles on the current user's account.
-- @param client Nakama client.
-- @param id (string) A custom identifier.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.unlink_custom(client, id, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not id or type(id) == "string", "Argument 'id' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/unlink/custom"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	id = id,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- unlink_device
-- Remove the device ID from the social profiles on the current user's account.
-- @param client Nakama client.
-- @param id (string) A device identifier. Should be obtained by a platform-specific device API.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.unlink_device(client, id, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not id or type(id) == "string", "Argument 'id' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/unlink/device"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	id = id,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- unlink_email
-- Remove the email+password from the social profiles on the current user's account.
-- @param client Nakama client.
-- @param email (string) A valid RFC-5322 email address.
-- @param password (string) A password for the user account.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.unlink_email(client, email, password, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not email or type(email) == "string", "Argument 'email' must be 'nil' or of type 'string'")
	assert(not password or type(password) == "string", "Argument 'password' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/unlink/email"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	email = email,
	password = password,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- unlink_facebook
-- Remove Facebook from the social profiles on the current user's account.
-- @param client Nakama client.
-- @param token (string) The OAuth token received from Facebook to access their profile API.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.unlink_facebook(client, token, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/unlink/facebook"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- unlink_facebook_instant_game
-- Remove Facebook Instant Game profile from the social profiles on the current user's account.
-- @param client Nakama client.
-- @param signedPlayerInfo (string) 
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.unlink_facebook_instant_game(client, signedPlayerInfo, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not signedPlayerInfo or type(signedPlayerInfo) == "string", "Argument 'signedPlayerInfo' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/unlink/facebookinstantgame"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	signedPlayerInfo = signedPlayerInfo,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- unlink_game_center
-- Remove Apple's GameCenter from the social profiles on the current user's account.
-- @param client Nakama client.
-- @param bundleId (string) Bundle ID (generated by GameCenter).
-- @param playerId (string) Player ID (generated by GameCenter).
-- @param publicKeyUrl (string) The URL for the public encryption key.
-- @param salt (string) A random "NSString" used to compute the hash and keep it randomized.
-- @param signature (string) The verification signature data generated.
-- @param timestampSeconds (string) Time since UNIX epoch when the signature was created.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.unlink_game_center(client, bundleId, playerId, publicKeyUrl, salt, signature, timestampSeconds, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not bundleId or type(bundleId) == "string", "Argument 'bundleId' must be 'nil' or of type 'string'")
	assert(not playerId or type(playerId) == "string", "Argument 'playerId' must be 'nil' or of type 'string'")
	assert(not publicKeyUrl or type(publicKeyUrl) == "string", "Argument 'publicKeyUrl' must be 'nil' or of type 'string'")
	assert(not salt or type(salt) == "string", "Argument 'salt' must be 'nil' or of type 'string'")
	assert(not signature or type(signature) == "string", "Argument 'signature' must be 'nil' or of type 'string'")
	assert(not timestampSeconds or type(timestampSeconds) == "string", "Argument 'timestampSeconds' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/unlink/gamecenter"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	bundleId = bundleId,
	playerId = playerId,
	publicKeyUrl = publicKeyUrl,
	salt = salt,
	signature = signature,
	timestampSeconds = timestampSeconds,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- unlink_google
-- Remove Google from the social profiles on the current user's account.
-- @param client Nakama client.
-- @param token (string) The OAuth token received from Google to access their profile API.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.unlink_google(client, token, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/unlink/google"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- unlink_steam
-- Remove Steam from the social profiles on the current user's account.
-- @param client Nakama client.
-- @param token (string) The account token received from Steam to access their profile API.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.unlink_steam(client, token, vars, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/account/unlink/steam"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- list_channel_messages
-- List a channel's message history.
-- @param client Nakama client.
-- @param channel_id_str () The channel ID to list from.
-- @param limit_int () Max number of records to return. Between 1 and 100.
-- @param forward_bool () True if listing should be older messages to newer, false if reverse.
-- @param cursor_str () A pagination cursor, if any.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_channel_messages(client, channel_id_str, limit_int, forward_bool, cursor_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/channel/{channelId}"
	url_path = url_path:gsub("{channelId}", uri_encode(channel_id_str))

	local query_params = {}
	query_params["limit"] = limit_int
	query_params["forward"] = forward_bool
	query_params["cursor"] = cursor_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_channel_message_list then
			result = api_channel_message_list.create(result)
		end
		return result
	end)
end

--- event
-- Submit an event for processing in the server's registered runtime custom events handler.
-- @param client Nakama client.
-- @param external (boolean) True if the event came directly from a client call, false otherwise.
-- @param name (string) An event name, type, category, or identifier.
-- @param properties (object) Arbitrary event property values.
-- @param timestamp (string) The time when the event was triggered.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.event(client, external, name, properties, timestamp, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not external or type(external) == "boolean", "Argument 'external' must be 'nil' or of type 'boolean'")
	assert(not name or type(name) == "string", "Argument 'name' must be 'nil' or of type 'string'")
	assert(not properties or type(properties) == "table", "Argument 'properties' must be 'nil' or of type 'table'")
	assert(not timestamp or type(timestamp) == "string", "Argument 'timestamp' must be 'nil' or of type 'string'")


	local url_path = "/v2/event"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	external = external,
	name = name,
	properties = properties,
	timestamp = timestamp,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- delete_friends
-- Delete one or more users by ID or username.
-- @param client Nakama client.
-- @param ids_arr () The account id of a user.
-- @param usernames_arr () The account username of a user.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.delete_friends(client, ids_arr, usernames_arr, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/friend"

	local query_params = {}
	query_params["ids"] = ids_arr
	query_params["usernames"] = usernames_arr

	local post_data = nil

	return http(client, callback, url_path, query_params, "DELETE", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- list_friends
-- List all friends for the current user.
-- @param client Nakama client.
-- @param limit_int () Max number of records to return. Between 1 and 100.
-- @param state_int () The friend state to list.
-- @param cursor_str () An optional next page cursor.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_friends(client, limit_int, state_int, cursor_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/friend"

	local query_params = {}
	query_params["limit"] = limit_int
	query_params["state"] = state_int
	query_params["cursor"] = cursor_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_friend_list then
			result = api_friend_list.create(result)
		end
		return result
	end)
end

--- add_friends
-- Add friends by ID or username to a user's account.
-- @param client Nakama client.
-- @param ids_arr () The account id of a user.
-- @param usernames_arr () The account username of a user.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.add_friends(client, ids_arr, usernames_arr, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/friend"

	local query_params = {}
	query_params["ids"] = ids_arr
	query_params["usernames"] = usernames_arr

	local post_data = nil

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- block_friends
-- Block one or more users by ID or username.
-- @param client Nakama client.
-- @param ids_arr () The account id of a user.
-- @param usernames_arr () The account username of a user.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.block_friends(client, ids_arr, usernames_arr, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/friend/block"

	local query_params = {}
	query_params["ids"] = ids_arr
	query_params["usernames"] = usernames_arr

	local post_data = nil

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- import_facebook_friends
-- Import Facebook friends and add them to a user's account.
-- @param client Nakama client.
-- @param token (string) The OAuth token received from Facebook to access their profile API.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param reset_bool () Reset the current user's friends list.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.import_facebook_friends(client, token, vars, reset_bool, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/friend/facebook"

	local query_params = {}
	query_params["reset"] = reset_bool

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- import_steam_friends
-- Import Steam friends and add them to a user's account.
-- @param client Nakama client.
-- @param token (string) The account token received from Steam to access their profile API.
-- @param vars (object) Extra information that will be bundled in the session token.

-- @param reset_bool () Reset the current user's friends list.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.import_steam_friends(client, token, vars, reset_bool, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")
	assert(not vars or type(vars) == "table", "Argument 'vars' must be 'nil' or of type 'table'")


	local url_path = "/v2/friend/steam"

	local query_params = {}
	query_params["reset"] = reset_bool

	local post_data = nil
	post_data = json.encode({
	token = token,
	vars = vars,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- list_groups
-- List groups based on given filters.
-- @param client Nakama client.
-- @param name_str () List groups that contain this value in their names.
-- @param cursor_str () Optional pagination cursor.
-- @param limit_int () Max number of groups to return. Between 1 and 100.
-- @param lang_tag_str () Language tag filter.
-- @param members_int () Number of group members.
-- @param open_bool () Optional Open/Closed filter.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_groups(client, name_str, cursor_str, limit_int, lang_tag_str, members_int, open_bool, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/group"

	local query_params = {}
	query_params["name"] = name_str
	query_params["cursor"] = cursor_str
	query_params["limit"] = limit_int
	query_params["langTag"] = lang_tag_str
	query_params["members"] = members_int
	query_params["open"] = open_bool

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_group_list then
			result = api_group_list.create(result)
		end
		return result
	end)
end

--- create_group
-- Create a new group with the current user as the owner.
-- @param client Nakama client.
-- @param avatarUrl (string) A URL for an avatar image.
-- @param description (string) A description for the group.
-- @param langTag (string) The language expected to be a tag which follows the BCP-47 spec.
-- @param maxCount (integer) Maximum number of group members.
-- @param name (string) A unique name for the group.
-- @param open (boolean) Mark a group as open or not where only admins can accept members.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.create_group(client, avatarUrl, description, langTag, maxCount, name, open, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not avatarUrl or type(avatarUrl) == "string", "Argument 'avatarUrl' must be 'nil' or of type 'string'")
	assert(not description or type(description) == "string", "Argument 'description' must be 'nil' or of type 'string'")
	assert(not langTag or type(langTag) == "string", "Argument 'langTag' must be 'nil' or of type 'string'")
	assert(not maxCount or type(maxCount) == "number", "Argument 'maxCount' must be 'nil' or of type 'number'")
	assert(not name or type(name) == "string", "Argument 'name' must be 'nil' or of type 'string'")
	assert(not open or type(open) == "boolean", "Argument 'open' must be 'nil' or of type 'boolean'")


	local url_path = "/v2/group"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	avatarUrl = avatarUrl,
	description = description,
	langTag = langTag,
	maxCount = maxCount,
	name = name,
	open = open,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_group then
			result = api_group.create(result)
		end
		return result
	end)
end

--- delete_group
-- Delete a group by ID.
-- @param client Nakama client.
-- @param group_id_str () The id of a group.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.delete_group(client, group_id_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/group/{groupId}"
	url_path = url_path:gsub("{groupId}", uri_encode(group_id_str))

	local query_params = {}

	local post_data = nil

	return http(client, callback, url_path, query_params, "DELETE", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- update_group
-- Update fields in a given group.
-- @param client Nakama client.
-- @param group_id_str () The ID of the group to update.
-- @param avatarUrl (string) Avatar URL.
-- @param description (string) Description string.
-- @param groupId (string) The ID of the group to update.
-- @param langTag (string) Lang tag.
-- @param name (string) Name.
-- @param open (boolean) Open is true if anyone should be allowed to join, or false if joins must be approved by a group admin.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.update_group(client, group_id_str, avatarUrl, description, groupId, langTag, name, open, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not avatarUrl or type(avatarUrl) == "string", "Argument 'avatarUrl' must be 'nil' or of type 'string'")
	assert(not description or type(description) == "string", "Argument 'description' must be 'nil' or of type 'string'")
	assert(not groupId or type(groupId) == "string", "Argument 'groupId' must be 'nil' or of type 'string'")
	assert(not langTag or type(langTag) == "string", "Argument 'langTag' must be 'nil' or of type 'string'")
	assert(not name or type(name) == "string", "Argument 'name' must be 'nil' or of type 'string'")
	assert(not open or type(open) == "boolean", "Argument 'open' must be 'nil' or of type 'boolean'")


	local url_path = "/v2/group/{groupId}"
	url_path = url_path:gsub("{groupId}", uri_encode(group_id_str))

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	avatarUrl = avatarUrl,
	description = description,
	groupId = groupId,
	langTag = langTag,
	name = name,
	open = open,
	})

	return http(client, callback, url_path, query_params, "PUT", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- add_group_users
-- Add users to a group.
-- @param client Nakama client.
-- @param group_id_str () The group to add users to.
-- @param user_ids_arr () The users to add.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.add_group_users(client, group_id_str, user_ids_arr, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/group/{groupId}/add"
	url_path = url_path:gsub("{groupId}", uri_encode(group_id_str))

	local query_params = {}
	query_params["userIds"] = user_ids_arr

	local post_data = nil

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- ban_group_users
-- Ban a set of users from a group.
-- @param client Nakama client.
-- @param group_id_str () The group to ban users from.
-- @param user_ids_arr () The users to ban.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.ban_group_users(client, group_id_str, user_ids_arr, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/group/{groupId}/ban"
	url_path = url_path:gsub("{groupId}", uri_encode(group_id_str))

	local query_params = {}
	query_params["userIds"] = user_ids_arr

	local post_data = nil

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- demote_group_users
-- Demote a set of users in a group to the next role down.
-- @param client Nakama client.
-- @param group_id_str () The group ID to demote in.
-- @param user_ids_arr () The users to demote.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.demote_group_users(client, group_id_str, user_ids_arr, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/group/{groupId}/demote"
	url_path = url_path:gsub("{groupId}", uri_encode(group_id_str))

	local query_params = {}
	query_params["userIds"] = user_ids_arr

	local post_data = nil

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- join_group
-- Immediately join an open group, or request to join a closed one.
-- @param client Nakama client.
-- @param group_id_str () The group ID to join. The group must already exist.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.join_group(client, group_id_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/group/{groupId}/join"
	url_path = url_path:gsub("{groupId}", uri_encode(group_id_str))

	local query_params = {}

	local post_data = nil

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- kick_group_users
-- Kick a set of users from a group.
-- @param client Nakama client.
-- @param group_id_str () The group ID to kick from.
-- @param user_ids_arr () The users to kick.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.kick_group_users(client, group_id_str, user_ids_arr, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/group/{groupId}/kick"
	url_path = url_path:gsub("{groupId}", uri_encode(group_id_str))

	local query_params = {}
	query_params["userIds"] = user_ids_arr

	local post_data = nil

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- leave_group
-- Leave a group the user is a member of.
-- @param client Nakama client.
-- @param group_id_str () The group ID to leave.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.leave_group(client, group_id_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/group/{groupId}/leave"
	url_path = url_path:gsub("{groupId}", uri_encode(group_id_str))

	local query_params = {}

	local post_data = nil

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- promote_group_users
-- Promote a set of users in a group to the next role up.
-- @param client Nakama client.
-- @param group_id_str () The group ID to promote in.
-- @param user_ids_arr () The users to promote.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.promote_group_users(client, group_id_str, user_ids_arr, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/group/{groupId}/promote"
	url_path = url_path:gsub("{groupId}", uri_encode(group_id_str))

	local query_params = {}
	query_params["userIds"] = user_ids_arr

	local post_data = nil

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- list_group_users
-- List all users that are part of a group.
-- @param client Nakama client.
-- @param group_id_str () The group ID to list from.
-- @param limit_int () Max number of records to return. Between 1 and 100.
-- @param state_int () The group user state to list.
-- @param cursor_str () An optional next page cursor.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_group_users(client, group_id_str, limit_int, state_int, cursor_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/group/{groupId}/user"
	url_path = url_path:gsub("{groupId}", uri_encode(group_id_str))

	local query_params = {}
	query_params["limit"] = limit_int
	query_params["state"] = state_int
	query_params["cursor"] = cursor_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_group_user_list then
			result = api_group_user_list.create(result)
		end
		return result
	end)
end

--- validate_purchase_apple
-- Validate Apple IAP Receipt
-- @param client Nakama client.
-- @param persist (boolean) 
-- @param receipt (string) Base64 encoded Apple receipt data payload.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.validate_purchase_apple(client, persist, receipt, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not persist or type(persist) == "boolean", "Argument 'persist' must be 'nil' or of type 'boolean'")
	assert(not receipt or type(receipt) == "string", "Argument 'receipt' must be 'nil' or of type 'string'")


	local url_path = "/v2/iap/purchase/apple"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	persist = persist,
	receipt = receipt,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_validate_purchase_response then
			result = api_validate_purchase_response.create(result)
		end
		return result
	end)
end

--- validate_purchase_google
-- Validate Google IAP Receipt
-- @param client Nakama client.
-- @param persist (boolean) 
-- @param purchase (string) JSON encoded Google purchase payload.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.validate_purchase_google(client, persist, purchase, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not persist or type(persist) == "boolean", "Argument 'persist' must be 'nil' or of type 'boolean'")
	assert(not purchase or type(purchase) == "string", "Argument 'purchase' must be 'nil' or of type 'string'")


	local url_path = "/v2/iap/purchase/google"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	persist = persist,
	purchase = purchase,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_validate_purchase_response then
			result = api_validate_purchase_response.create(result)
		end
		return result
	end)
end

--- validate_purchase_huawei
-- Validate Huawei IAP Receipt
-- @param client Nakama client.
-- @param persist (boolean) 
-- @param purchase (string) JSON encoded Huawei InAppPurchaseData.
-- @param signature (string) InAppPurchaseData signature.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.validate_purchase_huawei(client, persist, purchase, signature, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not persist or type(persist) == "boolean", "Argument 'persist' must be 'nil' or of type 'boolean'")
	assert(not purchase or type(purchase) == "string", "Argument 'purchase' must be 'nil' or of type 'string'")
	assert(not signature or type(signature) == "string", "Argument 'signature' must be 'nil' or of type 'string'")


	local url_path = "/v2/iap/purchase/huawei"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	persist = persist,
	purchase = purchase,
	signature = signature,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_validate_purchase_response then
			result = api_validate_purchase_response.create(result)
		end
		return result
	end)
end

--- list_subscriptions
-- List user's subscriptions.
-- @param client Nakama client.
-- @param cursor (string) 
-- @param limit (integer) 

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_subscriptions(client, cursor, limit, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not cursor or type(cursor) == "string", "Argument 'cursor' must be 'nil' or of type 'string'")
	assert(not limit or type(limit) == "number", "Argument 'limit' must be 'nil' or of type 'number'")


	local url_path = "/v2/iap/subscription"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	cursor = cursor,
	limit = limit,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_subscription_list then
			result = api_subscription_list.create(result)
		end
		return result
	end)
end

--- validate_subscription_apple
-- Validate Apple Subscription Receipt
-- @param client Nakama client.
-- @param persist (boolean) Persist the subscription.
-- @param receipt (string) Base64 encoded Apple receipt data payload.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.validate_subscription_apple(client, persist, receipt, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not persist or type(persist) == "boolean", "Argument 'persist' must be 'nil' or of type 'boolean'")
	assert(not receipt or type(receipt) == "string", "Argument 'receipt' must be 'nil' or of type 'string'")


	local url_path = "/v2/iap/subscription/apple"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	persist = persist,
	receipt = receipt,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_validate_subscription_response then
			result = api_validate_subscription_response.create(result)
		end
		return result
	end)
end

--- validate_subscription_google
-- Validate Google Subscription Receipt
-- @param client Nakama client.
-- @param persist (boolean) Persist the subscription.
-- @param receipt (string) JSON encoded Google purchase payload.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.validate_subscription_google(client, persist, receipt, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not persist or type(persist) == "boolean", "Argument 'persist' must be 'nil' or of type 'boolean'")
	assert(not receipt or type(receipt) == "string", "Argument 'receipt' must be 'nil' or of type 'string'")


	local url_path = "/v2/iap/subscription/google"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	persist = persist,
	receipt = receipt,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_validate_subscription_response then
			result = api_validate_subscription_response.create(result)
		end
		return result
	end)
end

--- get_subscription
-- Get subscription by product id.
-- @param client Nakama client.
-- @param product_id_str () Product id of the subscription
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.get_subscription(client, product_id_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/iap/subscription/{productId}"
	url_path = url_path:gsub("{productId}", uri_encode(product_id_str))

	local query_params = {}

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_validated_subscription then
			result = api_validated_subscription.create(result)
		end
		return result
	end)
end

--- delete_leaderboard_record
-- Delete a leaderboard record.
-- @param client Nakama client.
-- @param leaderboard_id_str () The leaderboard ID to delete from.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.delete_leaderboard_record(client, leaderboard_id_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/leaderboard/{leaderboardId}"
	url_path = url_path:gsub("{leaderboardId}", uri_encode(leaderboard_id_str))

	local query_params = {}

	local post_data = nil

	return http(client, callback, url_path, query_params, "DELETE", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- list_leaderboard_records
-- List leaderboard records.
-- @param client Nakama client.
-- @param leaderboard_id_str () The ID of the leaderboard to list for.
-- @param owner_ids_arr () One or more owners to retrieve records for.
-- @param limit_int () Max number of records to return. Between 1 and 100.
-- @param cursor_str () A next or previous page cursor.
-- @param expiry_str () Expiry in seconds (since epoch) to begin fetching records from. Optional. 0 means from current time.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_leaderboard_records(client, leaderboard_id_str, owner_ids_arr, limit_int, cursor_str, expiry_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/leaderboard/{leaderboardId}"
	url_path = url_path:gsub("{leaderboardId}", uri_encode(leaderboard_id_str))

	local query_params = {}
	query_params["ownerIds"] = owner_ids_arr
	query_params["limit"] = limit_int
	query_params["cursor"] = cursor_str
	query_params["expiry"] = expiry_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_leaderboard_record_list then
			result = api_leaderboard_record_list.create(result)
		end
		return result
	end)
end

--- write_leaderboard_record
-- Write a record to a leaderboard.
-- @param client Nakama client.
-- @param leaderboard_id_str () The ID of the leaderboard to write to.
-- @param metadata (string) Optional record metadata.
-- @param operator () Operator override.
-- @param score (string) The score value to submit.
-- @param subscore (string) An optional secondary value.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.write_leaderboard_record(client, leaderboard_id_str, metadata, operator, score, subscore, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not metadata or type(metadata) == "string", "Argument 'metadata' must be 'nil' or of type 'string'")
	assert(not operator or type(operator) == "string", "Argument 'operator' must be 'nil' or of type 'string'")
	assert(not score or type(score) == "string", "Argument 'score' must be 'nil' or of type 'string'")
	assert(not subscore or type(subscore) == "string", "Argument 'subscore' must be 'nil' or of type 'string'")


	local url_path = "/v2/leaderboard/{leaderboardId}"
	url_path = url_path:gsub("{leaderboardId}", uri_encode(leaderboard_id_str))

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	metadata = metadata,
	operator = operator,
	score = score,
	subscore = subscore,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_leaderboard_record then
			result = api_leaderboard_record.create(result)
		end
		return result
	end)
end

--- list_leaderboard_records_around_owner
-- List leaderboard records that belong to a user.
-- @param client Nakama client.
-- @param leaderboard_id_str () The ID of the tournament to list for.
-- @param owner_id_str () The owner to retrieve records around.
-- @param limit_int () Max number of records to return. Between 1 and 100.
-- @param expiry_str () Expiry in seconds (since epoch) to begin fetching records from.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_leaderboard_records_around_owner(client, leaderboard_id_str, owner_id_str, limit_int, expiry_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/leaderboard/{leaderboardId}/owner/{ownerId}"
	url_path = url_path:gsub("{leaderboardId}", uri_encode(leaderboard_id_str))
	url_path = url_path:gsub("{ownerId}", uri_encode(owner_id_str))

	local query_params = {}
	query_params["limit"] = limit_int
	query_params["expiry"] = expiry_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_leaderboard_record_list then
			result = api_leaderboard_record_list.create(result)
		end
		return result
	end)
end

--- list_matches
-- Fetch list of running matches.
-- @param client Nakama client.
-- @param limit_int () Limit the number of returned matches.
-- @param authoritative_bool () Authoritative or relayed matches.
-- @param label_str () Label filter.
-- @param min_size_int () Minimum user count.
-- @param max_size_int () Maximum user count.
-- @param query_str () Arbitrary label query.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_matches(client, limit_int, authoritative_bool, label_str, min_size_int, max_size_int, query_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/match"

	local query_params = {}
	query_params["limit"] = limit_int
	query_params["authoritative"] = authoritative_bool
	query_params["label"] = label_str
	query_params["minSize"] = min_size_int
	query_params["maxSize"] = max_size_int
	query_params["query"] = query_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_match_list then
			result = api_match_list.create(result)
		end
		return result
	end)
end

--- delete_notifications
-- Delete one or more notifications for the current user.
-- @param client Nakama client.
-- @param ids_arr () The id of notifications.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.delete_notifications(client, ids_arr, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/notification"

	local query_params = {}
	query_params["ids"] = ids_arr

	local post_data = nil

	return http(client, callback, url_path, query_params, "DELETE", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- list_notifications
-- Fetch list of notifications.
-- @param client Nakama client.
-- @param limit_int () The number of notifications to get. Between 1 and 100.
-- @param cacheable_cursor_str () A cursor to page through notifications. May be cached by clients to get from point in time forwards.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_notifications(client, limit_int, cacheable_cursor_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/notification"

	local query_params = {}
	query_params["limit"] = limit_int
	query_params["cacheableCursor"] = cacheable_cursor_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_notification_list then
			result = api_notification_list.create(result)
		end
		return result
	end)
end

--- rpc_func2
-- Execute a Lua function on the server.
-- @param client Nakama client.
-- @param id_str () The identifier of the function.
-- @param payload_str () The payload of the function which must be a JSON object.
-- @param http_key_str () The authentication key used when executed as a non-client HTTP request.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.rpc_func2(client, id_str, payload_str, http_key_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/rpc/{id}"
	url_path = url_path:gsub("{id}", uri_encode(id_str))

	local query_params = {}
	query_params["payload"] = payload_str
	query_params["httpKey"] = http_key_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_rpc then
			result = api_rpc.create(result)
		end
		return result
	end)
end

--- rpc_func
-- Execute a Lua function on the server.
-- @param client Nakama client.
-- @param id_str () The identifier of the function.
-- @param body (string) The payload of the function which must be a JSON object.
-- @param http_key_str () The authentication key used when executed as a non-client HTTP request.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.rpc_func(client, id_str, body, http_key_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	assert(body and type(body) == "string", "Argument 'body' must be of type 'string'")

	local url_path = "/v2/rpc/{id}"
	url_path = url_path:gsub("{id}", uri_encode(id_str))

	local query_params = {}
	query_params["httpKey"] = http_key_str

	local post_data = nil
	post_data = json.encode(body)

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_rpc then
			result = api_rpc.create(result)
		end
		return result
	end)
end

--- session_logout
-- Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
-- @param client Nakama client.
-- @param refreshToken (string) Refresh token to invalidate.
-- @param token (string) Session token to log out.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.session_logout(client, refreshToken, token, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not refreshToken or type(refreshToken) == "string", "Argument 'refreshToken' must be 'nil' or of type 'string'")
	assert(not token or type(token) == "string", "Argument 'token' must be 'nil' or of type 'string'")


	local url_path = "/v2/session/logout"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	refreshToken = refreshToken,
	token = token,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- read_storage_objects
-- Get storage objects.
-- @param client Nakama client.
-- @param objectIds (array) Batch of storage objects.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.read_storage_objects(client, objectIds, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not objectIds or type(objectIds) == "table", "Argument 'objectIds' must be 'nil' or of type 'table'")


	local url_path = "/v2/storage"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	objectIds = objectIds,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_storage_objects then
			result = api_storage_objects.create(result)
		end
		return result
	end)
end

--- write_storage_objects
-- Write objects into the storage engine.
-- @param client Nakama client.
-- @param objects (array) The objects to store on the server.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.write_storage_objects(client, objects, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not objects or type(objects) == "table", "Argument 'objects' must be 'nil' or of type 'table'")


	local url_path = "/v2/storage"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	objects = objects,
	})

	return http(client, callback, url_path, query_params, "PUT", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_storage_object_acks then
			result = api_storage_object_acks.create(result)
		end
		return result
	end)
end

--- delete_storage_objects
-- Delete one or more objects by ID or username.
-- @param client Nakama client.
-- @param objectIds (array) Batch of storage objects.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.delete_storage_objects(client, objectIds, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not objectIds or type(objectIds) == "table", "Argument 'objectIds' must be 'nil' or of type 'table'")


	local url_path = "/v2/storage/delete"

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	objectIds = objectIds,
	})

	return http(client, callback, url_path, query_params, "PUT", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- list_storage_objects
-- List publicly readable storage objects in a given collection.
-- @param client Nakama client.
-- @param collection_str () The collection which stores the object.
-- @param user_id_str () ID of the user.
-- @param limit_int () The number of storage objects to list. Between 1 and 100.
-- @param cursor_str () The cursor to page through results from.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_storage_objects(client, collection_str, user_id_str, limit_int, cursor_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/storage/{collection}"
	url_path = url_path:gsub("{collection}", uri_encode(collection_str))

	local query_params = {}
	query_params["userId"] = user_id_str
	query_params["limit"] = limit_int
	query_params["cursor"] = cursor_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_storage_object_list then
			result = api_storage_object_list.create(result)
		end
		return result
	end)
end

--- list_storage_objects2
-- List publicly readable storage objects in a given collection.
-- @param client Nakama client.
-- @param collection_str () The collection which stores the object.
-- @param user_id_str () ID of the user.
-- @param limit_int () The number of storage objects to list. Between 1 and 100.
-- @param cursor_str () The cursor to page through results from.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_storage_objects2(client, collection_str, user_id_str, limit_int, cursor_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/storage/{collection}/{userId}"
	url_path = url_path:gsub("{collection}", uri_encode(collection_str))
	url_path = url_path:gsub("{userId}", uri_encode(user_id_str))

	local query_params = {}
	query_params["limit"] = limit_int
	query_params["cursor"] = cursor_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_storage_object_list then
			result = api_storage_object_list.create(result)
		end
		return result
	end)
end

--- list_tournaments
-- List current or upcoming tournaments.
-- @param client Nakama client.
-- @param category_start_int () The start of the categories to include. Defaults to 0.
-- @param category_end_int () The end of the categories to include. Defaults to 128.
-- @param start_time_int () The start time for tournaments. Defaults to epoch.
-- @param end_time_int () The end time for tournaments. Defaults to +1 year from current Unix time.
-- @param limit_int () Max number of records to return. Between 1 and 100.
-- @param cursor_str () A next page cursor for listings (optional).
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_tournaments(client, category_start_int, category_end_int, start_time_int, end_time_int, limit_int, cursor_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/tournament"

	local query_params = {}
	query_params["categoryStart"] = category_start_int
	query_params["categoryEnd"] = category_end_int
	query_params["startTime"] = start_time_int
	query_params["endTime"] = end_time_int
	query_params["limit"] = limit_int
	query_params["cursor"] = cursor_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_tournament_list then
			result = api_tournament_list.create(result)
		end
		return result
	end)
end

--- list_tournament_records
-- List tournament records.
-- @param client Nakama client.
-- @param tournament_id_str () The ID of the tournament to list for.
-- @param owner_ids_arr () One or more owners to retrieve records for.
-- @param limit_int () Max number of records to return. Between 1 and 100.
-- @param cursor_str () A next or previous page cursor.
-- @param expiry_str () Expiry in seconds (since epoch) to begin fetching records from.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_tournament_records(client, tournament_id_str, owner_ids_arr, limit_int, cursor_str, expiry_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/tournament/{tournamentId}"
	url_path = url_path:gsub("{tournamentId}", uri_encode(tournament_id_str))

	local query_params = {}
	query_params["ownerIds"] = owner_ids_arr
	query_params["limit"] = limit_int
	query_params["cursor"] = cursor_str
	query_params["expiry"] = expiry_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_tournament_record_list then
			result = api_tournament_record_list.create(result)
		end
		return result
	end)
end

--- write_tournament_record2
-- Write a record to a tournament.
-- @param client Nakama client.
-- @param tournament_id_str () The tournament ID to write the record for.
-- @param metadata (string) A JSON object of additional properties (optional).
-- @param operator () Operator override.
-- @param score (string) The score value to submit.
-- @param subscore (string) An optional secondary value.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.write_tournament_record2(client, tournament_id_str, metadata, operator, score, subscore, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not metadata or type(metadata) == "string", "Argument 'metadata' must be 'nil' or of type 'string'")
	assert(not operator or type(operator) == "string", "Argument 'operator' must be 'nil' or of type 'string'")
	assert(not score or type(score) == "string", "Argument 'score' must be 'nil' or of type 'string'")
	assert(not subscore or type(subscore) == "string", "Argument 'subscore' must be 'nil' or of type 'string'")


	local url_path = "/v2/tournament/{tournamentId}"
	url_path = url_path:gsub("{tournamentId}", uri_encode(tournament_id_str))

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	metadata = metadata,
	operator = operator,
	score = score,
	subscore = subscore,
	})

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_leaderboard_record then
			result = api_leaderboard_record.create(result)
		end
		return result
	end)
end

--- write_tournament_record
-- Write a record to a tournament.
-- @param client Nakama client.
-- @param tournament_id_str () The tournament ID to write the record for.
-- @param metadata (string) A JSON object of additional properties (optional).
-- @param operator () Operator override.
-- @param score (string) The score value to submit.
-- @param subscore (string) An optional secondary value.

-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.write_tournament_record(client, tournament_id_str, metadata, operator, score, subscore, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")
	assert(not metadata or type(metadata) == "string", "Argument 'metadata' must be 'nil' or of type 'string'")
	assert(not operator or type(operator) == "string", "Argument 'operator' must be 'nil' or of type 'string'")
	assert(not score or type(score) == "string", "Argument 'score' must be 'nil' or of type 'string'")
	assert(not subscore or type(subscore) == "string", "Argument 'subscore' must be 'nil' or of type 'string'")


	local url_path = "/v2/tournament/{tournamentId}"
	url_path = url_path:gsub("{tournamentId}", uri_encode(tournament_id_str))

	local query_params = {}

	local post_data = nil
	post_data = json.encode({
	metadata = metadata,
	operator = operator,
	score = score,
	subscore = subscore,
	})

	return http(client, callback, url_path, query_params, "PUT", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_leaderboard_record then
			result = api_leaderboard_record.create(result)
		end
		return result
	end)
end

--- join_tournament
-- Attempt to join an open and running tournament.
-- @param client Nakama client.
-- @param tournament_id_str () The ID of the tournament to join. The tournament must already exist.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.join_tournament(client, tournament_id_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/tournament/{tournamentId}/join"
	url_path = url_path:gsub("{tournamentId}", uri_encode(tournament_id_str))

	local query_params = {}

	local post_data = nil

	return http(client, callback, url_path, query_params, "POST", post_data, retry_policy, cancellation_token, function(result)
		return result
	end)
end

--- list_tournament_records_around_owner
-- List tournament records for a given owner.
-- @param client Nakama client.
-- @param tournament_id_str () The ID of the tournament to list for.
-- @param owner_id_str () The owner to retrieve records around.
-- @param limit_int () Max number of records to return. Between 1 and 100.
-- @param expiry_str () Expiry in seconds (since epoch) to begin fetching records from.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_tournament_records_around_owner(client, tournament_id_str, owner_id_str, limit_int, expiry_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/tournament/{tournamentId}/owner/{ownerId}"
	url_path = url_path:gsub("{tournamentId}", uri_encode(tournament_id_str))
	url_path = url_path:gsub("{ownerId}", uri_encode(owner_id_str))

	local query_params = {}
	query_params["limit"] = limit_int
	query_params["expiry"] = expiry_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_tournament_record_list then
			result = api_tournament_record_list.create(result)
		end
		return result
	end)
end

--- get_users
-- Fetch zero or more users by ID and/or username.
-- @param client Nakama client.
-- @param ids_arr () The account id of a user.
-- @param usernames_arr () The account username of a user.
-- @param facebook_ids_arr () The Facebook ID of a user.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.get_users(client, ids_arr, usernames_arr, facebook_ids_arr, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/user"

	local query_params = {}
	query_params["ids"] = ids_arr
	query_params["usernames"] = usernames_arr
	query_params["facebookIds"] = facebook_ids_arr

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_users then
			result = api_users.create(result)
		end
		return result
	end)
end

--- list_user_groups
-- List groups the current user belongs to.
-- @param client Nakama client.
-- @param user_id_str () ID of the user.
-- @param limit_int () Max number of records to return. Between 1 and 100.
-- @param state_int () The user group state to list.
-- @param cursor_str () An optional next page cursor.
-- @param callback Optional callback function
-- A coroutine is used and the result is returned if no callback function is provided.
-- @param retry_policy Optional retry policy used specifically for this call or nil
-- @param cancellation_token Optional cancellation token for this call
-- @return The result.
function M.list_user_groups(client, user_id_str, limit_int, state_int, cursor_str, callback, retry_policy, cancellation_token)
	assert(client, "You must provide a client")

	local url_path = "/v2/user/{userId}/group"
	url_path = url_path:gsub("{userId}", uri_encode(user_id_str))

	local query_params = {}
	query_params["limit"] = limit_int
	query_params["state"] = state_int
	query_params["cursor"] = cursor_str

	local post_data = nil

	return http(client, callback, url_path, query_params, "GET", post_data, retry_policy, cancellation_token, function(result)
		if not result.error and api_user_group_list then
			result = api_user_group_list.create(result)
		end
		return result
	end)
end

return M
